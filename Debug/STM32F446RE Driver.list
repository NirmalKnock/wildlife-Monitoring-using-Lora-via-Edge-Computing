
STM32F446RE Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800296c  0800296c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800296c  0800296c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800296c  0800296c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800296c  0800296c  0001296c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000080  080029f4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080029f4  00020180  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043be  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d08  00000000  00000000  00024468  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000308  00000000  00000000  00025170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000290  00000000  00000000  00025478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000036f8  00000000  00000000  00025708  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002e98  00000000  00000000  00028e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c4e1  00000000  00000000  0002bc98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00038179  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b4  00000000  00000000  000381f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002860 	.word	0x08002860

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08002860 	.word	0x08002860

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <ds1307_Init>:
  *							- If the function return 0, that means CH =0, RTC is work 	(inits passed)

*/

uint8_t ds1307_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
		// 1. Init the I2C pins
		ds1307_i2c_pin_config();
 80002b6:	f000 f893 	bl	80003e0 <ds1307_i2c_pin_config>

		//2.	Initialize the peripheral
		ds1307_i2c_peripheral_config();
 80002ba:	f000 f8cd 	bl	8000458 <ds1307_i2c_peripheral_config>

		//3. 	Enalbing the I2C peripheral
		I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80002be:	2101      	movs	r1, #1
 80002c0:	4807      	ldr	r0, [pc, #28]	; (80002e0 <ds1307_Init+0x30>)
 80002c2:	f001 f9d8 	bl	8001676 <I2C_PeripheralControl>
		//4.	Make the CH bits as 0 to , start the RTC (CLOCK halt)
		ds1307_Write(0x00,DS1307_ADDR_SEC);				//Value , word section

#endif
		//5.	Read back the CH bit, to check if it set or not
		uint8_t Clock_State = ds1307_Read(DS1307_I2C_ADDRESS);
 80002c6:	2068      	movs	r0, #104	; 0x68
 80002c8:	f000 f8dc 	bl	8000484 <ds1307_Read>
 80002cc:	4603      	mov	r3, r0
 80002ce:	71fb      	strb	r3, [r7, #7]



	return ( (Clock_State >> 7 ) & 0x1);
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	09db      	lsrs	r3, r3, #7
 80002d4:	b2db      	uxtb	r3, r3


}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40005400 	.word	0x40005400

080002e4 <ds1307_get_current_time>:
  *
  *	@Note				- none

*/
void ds1307_get_current_time(RTC_time_t *pRTC_Time)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	uint8_t seconds , hrs;
	seconds = ds1307_Read(DS1307_ADDR_SEC);
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 f8c9 	bl	8000484 <ds1307_Read>
 80002f2:	4603      	mov	r3, r0
 80002f4:	73bb      	strb	r3, [r7, #14]
	//Clear the CH bit, we don;t require
	seconds &= ~ ( 1 << 7);
 80002f6:	7bbb      	ldrb	r3, [r7, #14]
 80002f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002fc:	73bb      	strb	r3, [r7, #14]

	//After that convert BCD to Binary, and updating in structure
	pRTC_Time->seconds = bcd_to_binary(seconds);
 80002fe:	7bbb      	ldrb	r3, [r7, #14]
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f8dd 	bl	80004c0 <bcd_to_binary>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	709a      	strb	r2, [r3, #2]
	pRTC_Time->minute = bcd_to_binary(ds1307_Read(DS1307_ADDR_MIN));
 800030e:	2001      	movs	r0, #1
 8000310:	f000 f8b8 	bl	8000484 <ds1307_Read>
 8000314:	4603      	mov	r3, r0
 8000316:	4618      	mov	r0, r3
 8000318:	f000 f8d2 	bl	80004c0 <bcd_to_binary>
 800031c:	4603      	mov	r3, r0
 800031e:	461a      	mov	r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	705a      	strb	r2, [r3, #1]

	//getting the hrs
	hrs = ds1307_Read(DS1307_ADDR_HOURS);
 8000324:	2002      	movs	r0, #2
 8000326:	f000 f8ad 	bl	8000484 <ds1307_Read>
 800032a:	4603      	mov	r3, r0
 800032c:	73fb      	strb	r3, [r7, #15]

		//--To get status of AM or PM and Time format--//

			//Get the time format
			if (hrs & (1 << 6))
 800032e:	7bfb      	ldrb	r3, [r7, #15]
 8000330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000334:	2b00      	cmp	r3, #0
 8000336:	d00f      	beq.n	8000358 <ds1307_get_current_time+0x74>
			{
						//12 hrs mode is selected
						pRTC_Time->time_format	 =	! ((hrs & (1 << 5)) == 0	);
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	f003 0320 	and.w	r3, r3, #32
 800033e:	2b00      	cmp	r3, #0
 8000340:	bf14      	ite	ne
 8000342:	2301      	movne	r3, #1
 8000344:	2300      	moveq	r3, #0
 8000346:	b2db      	uxtb	r3, r3
 8000348:	461a      	mov	r2, r3
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	70da      	strb	r2, [r3, #3]
						//Clearning 5 th and 6th positions, we don;t want this
						hrs &= ~ ( 0x3 << 5);
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000354:	73fb      	strb	r3, [r7, #15]
 8000356:	e002      	b.n	800035e <ds1307_get_current_time+0x7a>
			}
			else
			{
				//24hrs mode is selected
				pRTC_Time->time_format = TIME_FORMAT_24HRS;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2202      	movs	r2, #2
 800035c:	70da      	strb	r2, [r3, #3]
			}

	//storing a hours
	pRTC_Time->hours = bcd_to_binary(hrs);
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f8ad 	bl	80004c0 <bcd_to_binary>
 8000366:	4603      	mov	r3, r0
 8000368:	461a      	mov	r2, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	701a      	strb	r2, [r3, #0]

}
 800036e:	bf00      	nop
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <ds1307_get_current_date>:
  *
  *	@Note				- none

*/
void ds1307_get_current_date(RTC_date_t *pRTC_Date)
{
 8000376:	b580      	push	{r7, lr}
 8000378:	b082      	sub	sp, #8
 800037a:	af00      	add	r7, sp, #0
 800037c:	6078      	str	r0, [r7, #4]

	pRTC_Date->date			= bcd_to_binary(ds1307_Read(DS1307_ADDR_DATE));
 800037e:	2004      	movs	r0, #4
 8000380:	f000 f880 	bl	8000484 <ds1307_Read>
 8000384:	4603      	mov	r3, r0
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f89a 	bl	80004c0 <bcd_to_binary>
 800038c:	4603      	mov	r3, r0
 800038e:	461a      	mov	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	701a      	strb	r2, [r3, #0]
	pRTC_Date->day 			= bcd_to_binary(ds1307_Read(DS1307_ADDR_DAY));
 8000394:	2003      	movs	r0, #3
 8000396:	f000 f875 	bl	8000484 <ds1307_Read>
 800039a:	4603      	mov	r3, r0
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f88f 	bl	80004c0 <bcd_to_binary>
 80003a2:	4603      	mov	r3, r0
 80003a4:	461a      	mov	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	70da      	strb	r2, [r3, #3]
	pRTC_Date->month		= bcd_to_binary(ds1307_Read(DS1307_ADDR_MONTH));
 80003aa:	2005      	movs	r0, #5
 80003ac:	f000 f86a 	bl	8000484 <ds1307_Read>
 80003b0:	4603      	mov	r3, r0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f884 	bl	80004c0 <bcd_to_binary>
 80003b8:	4603      	mov	r3, r0
 80003ba:	461a      	mov	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	705a      	strb	r2, [r3, #1]
	pRTC_Date->year 		= bcd_to_binary(ds1307_Read(DS1307_ADDR_YEAR));
 80003c0:	2006      	movs	r0, #6
 80003c2:	f000 f85f 	bl	8000484 <ds1307_Read>
 80003c6:	4603      	mov	r3, r0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f879 	bl	80004c0 <bcd_to_binary>
 80003ce:	4603      	mov	r3, r0
 80003d0:	461a      	mov	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	709a      	strb	r2, [r3, #2]
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <ds1307_i2c_pin_config>:




static void ds1307_i2c_pin_config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	//for SDA
	//clear the structure
	memset(&i2c_sda,0, sizeof(i2c_sda));
 80003e6:	f107 030c 	add.w	r3, r7, #12
 80003ea:	220c      	movs	r2, #12
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 fc16 	bl	8001c20 <memset>
	memset(&i2c_scl,  0, sizeof(i2c_scl));
 80003f4:	463b      	mov	r3, r7
 80003f6:	220c      	movs	r2, #12
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 fc10 	bl	8001c20 <memset>

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <ds1307_i2c_pin_config+0x74>)
 8000402:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000404:	2307      	movs	r3, #7
 8000406:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000408:	2302      	movs	r3, #2
 800040a:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800040c:	2304      	movs	r3, #4
 800040e:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000410:	2301      	movs	r3, #1
 8000412:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000414:	2301      	movs	r3, #1
 8000416:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000418:	2303      	movs	r3, #3
 800041a:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 800041c:	f107 030c 	add.w	r3, r7, #12
 8000420:	4618      	mov	r0, r3
 8000422:	f000 fccb 	bl	8000dbc <GPIO_Init>

	//For SCL
	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <ds1307_i2c_pin_config+0x74>)
 8000428:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 800042a:	2306      	movs	r3, #6
 800042c:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800042e:	2302      	movs	r3, #2
 8000430:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000432:	2304      	movs	r3, #4
 8000434:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000436:	2301      	movs	r3, #1
 8000438:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800043a:	2301      	movs	r3, #1
 800043c:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800043e:	2303      	movs	r3, #3
 8000440:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 8000442:	463b      	mov	r3, r7
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fcb9 	bl	8000dbc <GPIO_Init>
}
 800044a:	bf00      	nop
 800044c:	3718      	adds	r7, #24
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40020400 	.word	0x40020400

08000458 <ds1307_i2c_peripheral_config>:


static void ds1307_i2c_peripheral_config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <ds1307_i2c_peripheral_config+0x20>)
 800045e:	4a07      	ldr	r2, [pc, #28]	; (800047c <ds1307_i2c_peripheral_config+0x24>)
 8000460:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000462:	4b05      	ldr	r3, [pc, #20]	; (8000478 <ds1307_i2c_peripheral_config+0x20>)
 8000464:	2201      	movs	r2, #1
 8000466:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <ds1307_i2c_peripheral_config+0x20>)
 800046a:	4a05      	ldr	r2, [pc, #20]	; (8000480 <ds1307_i2c_peripheral_config+0x28>)
 800046c:	605a      	str	r2, [r3, #4]

	I2C_Init(&g_ds1307I2cHandle);
 800046e:	4802      	ldr	r0, [pc, #8]	; (8000478 <ds1307_i2c_peripheral_config+0x20>)
 8000470:	f000 ff50 	bl	8001314 <I2C_Init>

}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000160 	.word	0x20000160
 800047c:	40005400 	.word	0x40005400
 8000480:	000186a0 	.word	0x000186a0

08000484 <ds1307_Read>:

}


static uint8_t ds1307_Read(uint8_t word_address)				//first send device addres,and word address,, after to read,, refer RM for detials
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af02      	add	r7, sp, #8
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
	uint8_t read_value;
	I2C_MasterSendData(&g_ds1307I2cHandle, &word_address, 1, DS1307_I2C_ADDRESS, I2C_DISABLE_SR);
 800048e:	1df9      	adds	r1, r7, #7
 8000490:	2300      	movs	r3, #0
 8000492:	9300      	str	r3, [sp, #0]
 8000494:	2368      	movs	r3, #104	; 0x68
 8000496:	2201      	movs	r2, #1
 8000498:	4808      	ldr	r0, [pc, #32]	; (80004bc <ds1307_Read+0x38>)
 800049a:	f000 fff7 	bl	800148c <I2C_MasterSendData>
	I2C_MasterReceiverData(&g_ds1307I2cHandle, &read_value, 1, DS1307_I2C_ADDRESS, I2C_DISABLE_SR);
 800049e:	f107 010f 	add.w	r1, r7, #15
 80004a2:	2300      	movs	r3, #0
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	2368      	movs	r3, #104	; 0x68
 80004a8:	2201      	movs	r2, #1
 80004aa:	4804      	ldr	r0, [pc, #16]	; (80004bc <ds1307_Read+0x38>)
 80004ac:	f001 f851 	bl	8001552 <I2C_MasterReceiverData>

	return read_value;
 80004b0:	7bfb      	ldrb	r3, [r7, #15]

}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000160 	.word	0x20000160

080004c0 <bcd_to_binary>:

	return bcd_value;
}

static uint8_t  bcd_to_binary(uint8_t word_value)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	uint8_t m_value, n_value;

	m_value = (uint8_t) (( word_value >> 4) * 10 );
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	091b      	lsrs	r3, r3, #4
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	461a      	mov	r2, r3
 80004d2:	0092      	lsls	r2, r2, #2
 80004d4:	4413      	add	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	73fb      	strb	r3, [r7, #15]
	n_value = ((word_value & (uint8_t) 0x0F));			//mask bit
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	f003 030f 	and.w	r3, r3, #15
 80004e0:	73bb      	strb	r3, [r7, #14]



	return (m_value + n_value);
 80004e2:	7bfa      	ldrb	r2, [r7, #15]
 80004e4:	7bbb      	ldrb	r3, [r7, #14]
 80004e6:	4413      	add	r3, r2
 80004e8:	b2db      	uxtb	r3, r3
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <lcd_Init>:

/*
 ****************************| LCD Inits|********************************************
 */
void lcd_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0

	//1. Configure the gpio pins that we are used in the lcd Connections

	GPIO_Handle_t LCD_Gpio;

	memset(&LCD_Gpio,0,sizeof(LCD_Gpio));
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	220c      	movs	r2, #12
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f001 fb8d 	bl	8001c20 <memset>

	LCD_Gpio.pGPIOx = LCD_GPIO_PORT;			//GPIOB
 8000506:	4b48      	ldr	r3, [pc, #288]	; (8000628 <lcd_Init+0x134>)
 8000508:	607b      	str	r3, [r7, #4]
	LCD_Gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800050a:	2301      	movs	r3, #1
 800050c:	727b      	strb	r3, [r7, #9]
	LCD_Gpio.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 800050e:	2300      	movs	r3, #0
 8000510:	723b      	strb	r3, [r7, #8]
	LCD_Gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000512:	2300      	movs	r3, #0
 8000514:	733b      	strb	r3, [r7, #12]
	LCD_Gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000516:	2300      	movs	r3, #0
 8000518:	72fb      	strb	r3, [r7, #11]
	LCD_Gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800051a:	2302      	movs	r3, #2
 800051c:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&LCD_Gpio);
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4618      	mov	r0, r3
 8000522:	f000 fc4b 	bl	8000dbc <GPIO_Init>

	LCD_Gpio.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000526:	230a      	movs	r3, #10
 8000528:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&LCD_Gpio);
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fc45 	bl	8000dbc <GPIO_Init>

	LCD_Gpio.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000532:	2306      	movs	r3, #6
 8000534:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&LCD_Gpio);
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fc3f 	bl	8000dbc <GPIO_Init>

	LCD_Gpio.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 800053e:	2307      	movs	r3, #7
 8000540:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&LCD_Gpio);
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	4618      	mov	r0, r3
 8000546:	f000 fc39 	bl	8000dbc <GPIO_Init>

	LCD_Gpio.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 800054a:	2308      	movs	r3, #8
 800054c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&LCD_Gpio);
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fc33 	bl	8000dbc <GPIO_Init>

	LCD_Gpio.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000556:	2301      	movs	r3, #1
 8000558:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&LCD_Gpio);
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fc2d 	bl	8000dbc <GPIO_Init>

	LCD_Gpio.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000562:	2304      	movs	r3, #4
 8000564:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&LCD_Gpio);
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fc27 	bl	8000dbc <GPIO_Init>

	//Keep all value 0 , on the pin
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	482d      	ldr	r0, [pc, #180]	; (8000628 <lcd_Init+0x134>)
 8000574:	f000 fdb6 	bl	80010e4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2101      	movs	r1, #1
 800057c:	482a      	ldr	r0, [pc, #168]	; (8000628 <lcd_Init+0x134>)
 800057e:	f000 fdb1 	bl	80010e4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2104      	movs	r1, #4
 8000586:	4828      	ldr	r0, [pc, #160]	; (8000628 <lcd_Init+0x134>)
 8000588:	f000 fdac 	bl	80010e4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	210a      	movs	r1, #10
 8000590:	4825      	ldr	r0, [pc, #148]	; (8000628 <lcd_Init+0x134>)
 8000592:	f000 fda7 	bl	80010e4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2106      	movs	r1, #6
 800059a:	4823      	ldr	r0, [pc, #140]	; (8000628 <lcd_Init+0x134>)
 800059c:	f000 fda2 	bl	80010e4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2107      	movs	r1, #7
 80005a4:	4820      	ldr	r0, [pc, #128]	; (8000628 <lcd_Init+0x134>)
 80005a6:	f000 fd9d 	bl	80010e4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2108      	movs	r1, #8
 80005ae:	481e      	ldr	r0, [pc, #120]	; (8000628 <lcd_Init+0x134>)
 80005b0:	f000 fd98 	bl	80010e4 <GPIO_WriteToOutputPin>

	//2. Configure the LCD initialization
	//Refer data sheet

	mdelay(40);
 80005b4:	2028      	movs	r0, #40	; 0x28
 80005b6:	f000 f860 	bl	800067a <mdelay>

	/*Rs = 0, for LCD command Mode*/
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	481a      	ldr	r0, [pc, #104]	; (8000628 <lcd_Init+0x134>)
 80005c0:	f000 fd90 	bl	80010e4 <GPIO_WriteToOutputPin>

	/*RW = 0. for LCD mode Write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2101      	movs	r1, #1
 80005c8:	4817      	ldr	r0, [pc, #92]	; (8000628 <lcd_Init+0x134>)
 80005ca:	f000 fd8b 	bl	80010e4 <GPIO_WriteToOutputPin>

	//writing 0, 1 to lcd pin(helper function) , refer RM
	write_4_bits(0x3);					// 0 0 1 1			MSB - LSB
 80005ce:	2003      	movs	r0, #3
 80005d0:	f000 f894 	bl	80006fc <write_4_bits>

	mdelay(5);
 80005d4:	2005      	movs	r0, #5
 80005d6:	f000 f850 	bl	800067a <mdelay>

	//writing 0, 1 to lcd pin(helper function) , refer RM
	write_4_bits(0x03);
 80005da:	2003      	movs	r0, #3
 80005dc:	f000 f88e 	bl	80006fc <write_4_bits>

	udelay(150);
 80005e0:	2096      	movs	r0, #150	; 0x96
 80005e2:	f000 f861 	bl	80006a8 <udelay>

	//writing 0, 1 to lcd pin(helper function) , refer RM
	write_4_bits(0x3);
 80005e6:	2003      	movs	r0, #3
 80005e8:	f000 f888 	bl	80006fc <write_4_bits>

	//writing 0, 1 to lcd pin(helper function) , refer RM
	write_4_bits(0x2);
 80005ec:	2002      	movs	r0, #2
 80005ee:	f000 f885 	bl	80006fc <write_4_bits>

	/*****command config*******/

	//Function set Command(refer RM ti send , which command first)
	//send the function command
	lcd_Send_Command(LCD_CMD_4DL_2N_5X8);
 80005f2:	2028      	movs	r0, #40	; 0x28
 80005f4:	f000 f8ba 	bl	800076c <lcd_Send_Command>

	mdelay(5);
 80005f8:	2005      	movs	r0, #5
 80005fa:	f000 f83e 	bl	800067a <mdelay>

	//send the display on off command
	lcd_Send_Command(LCD_CMD_DON_CURON);
 80005fe:	200e      	movs	r0, #14
 8000600:	f000 f8b4 	bl	800076c <lcd_Send_Command>
	mdelay(5);
 8000604:	2005      	movs	r0, #5
 8000606:	f000 f838 	bl	800067a <mdelay>


	//send display clear command
	Lcd_Display_clear();
 800060a:	f000 f8f3 	bl	80007f4 <Lcd_Display_clear>
	mdelay(5);
 800060e:	2005      	movs	r0, #5
 8000610:	f000 f833 	bl	800067a <mdelay>

	//Entry mode set command
	lcd_Send_Command(LCD_CMD_INCADD);
 8000614:	2006      	movs	r0, #6
 8000616:	f000 f8a9 	bl	800076c <lcd_Send_Command>
	mdelay(5);
 800061a:	2005      	movs	r0, #5
 800061c:	f000 f82d 	bl	800067a <mdelay>


}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40020000 	.word	0x40020000

0800062c <LCD_Set_Cursor>:
  *   Set Lcd to a specified location given by row and column information
  *   Row Number (1 to 2)
  *   Column Number (1 to 16) Assuming a 2 X 16 characters display
  */
void LCD_Set_Cursor(uint8_t row, uint8_t coloumn)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	460a      	mov	r2, r1
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	4613      	mov	r3, r2
 800063a:	71bb      	strb	r3, [r7, #6]
	coloumn--;
 800063c:	79bb      	ldrb	r3, [r7, #6]
 800063e:	3b01      	subs	r3, #1
 8000640:	71bb      	strb	r3, [r7, #6]

	switch(row)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d002      	beq.n	800064e <LCD_Set_Cursor+0x22>
 8000648:	2b02      	cmp	r3, #2
 800064a:	d009      	beq.n	8000660 <LCD_Set_Cursor+0x34>
			break;
		case 2 :
			lcd_Send_Command((coloumn |= 0xC0));
			break;
		default:
			break;
 800064c:	e011      	b.n	8000672 <LCD_Set_Cursor+0x46>
			lcd_Send_Command((coloumn |= 0x80));		//refer RM in 11th page
 800064e:	79bb      	ldrb	r3, [r7, #6]
 8000650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000654:	71bb      	strb	r3, [r7, #6]
 8000656:	79bb      	ldrb	r3, [r7, #6]
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f887 	bl	800076c <lcd_Send_Command>
			break;
 800065e:	e008      	b.n	8000672 <LCD_Set_Cursor+0x46>
			lcd_Send_Command((coloumn |= 0xC0));
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000666:	71bb      	strb	r3, [r7, #6]
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f87e 	bl	800076c <lcd_Send_Command>
			break;
 8000670:	bf00      	nop
	}

}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <mdelay>:




 void mdelay(uint32_t cnt)
{
 800067a:	b480      	push	{r7}
 800067c:	b085      	sub	sp, #20
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < (cnt * 1000); i++);
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	e002      	b.n	800068e <mdelay+0x14>
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3301      	adds	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000694:	fb02 f303 	mul.w	r3, r2, r3
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	429a      	cmp	r2, r3
 800069c:	d3f4      	bcc.n	8000688 <mdelay+0xe>
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <udelay>:

 void udelay(uint32_t cnt)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < (cnt * 1); i++);
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	e002      	b.n	80006bc <udelay+0x14>
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d3f8      	bcc.n	80006b6 <udelay+0xe>
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
	...

080006d0 <Lcd_Enable>:
 * LCD Enable
 * High to low transition
 */

static void Lcd_Enable(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN,GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2104      	movs	r1, #4
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <Lcd_Enable+0x28>)
 80006da:	f000 fd03 	bl	80010e4 <GPIO_WriteToOutputPin>
	udelay(10);
 80006de:	200a      	movs	r0, #10
 80006e0:	f7ff ffe2 	bl	80006a8 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN,GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2104      	movs	r1, #4
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <Lcd_Enable+0x28>)
 80006ea:	f000 fcfb 	bl	80010e4 <GPIO_WriteToOutputPin>
	udelay(100);	//Execution time greater than 37 us
 80006ee:	2064      	movs	r0, #100	; 0x64
 80006f0:	f7ff ffda 	bl	80006a8 <udelay>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40020000 	.word	0x40020000

080006fc <write_4_bits>:
 * Writes 4 bits of command to LCD,ON pins D4, D5, D6, D7
 * // value = 0 0 1 1			MSB - LSB
 */

static void write_4_bits(uint8_t value)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, ((value >> 0) & 0x1));	//for D4 =1
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	210a      	movs	r1, #10
 8000712:	4815      	ldr	r0, [pc, #84]	; (8000768 <write_4_bits+0x6c>)
 8000714:	f000 fce6 	bl	80010e4 <GPIO_WriteToOutputPin>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, ((value >> 1) & 0x1));	//for D5 =1
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	085b      	lsrs	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	2106      	movs	r1, #6
 8000728:	480f      	ldr	r0, [pc, #60]	; (8000768 <write_4_bits+0x6c>)
 800072a:	f000 fcdb 	bl	80010e4 <GPIO_WriteToOutputPin>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, ((value >> 2) & 0x1));	//for D6 =0
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	089b      	lsrs	r3, r3, #2
 8000732:	b2db      	uxtb	r3, r3
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	b2db      	uxtb	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	2107      	movs	r1, #7
 800073e:	480a      	ldr	r0, [pc, #40]	; (8000768 <write_4_bits+0x6c>)
 8000740:	f000 fcd0 	bl	80010e4 <GPIO_WriteToOutputPin>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, ((value >> 3) & 0x1));	//for D7 =0
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	b2db      	uxtb	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	2108      	movs	r1, #8
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <write_4_bits+0x6c>)
 8000756:	f000 fcc5 	bl	80010e4 <GPIO_WriteToOutputPin>


	//to latch every thing
	Lcd_Enable();
 800075a:	f7ff ffb9 	bl	80006d0 <Lcd_Enable>

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40020000 	.word	0x40020000

0800076c <lcd_Send_Command>:
 * RS= 0 , Command Mode
 * WR= 0, Write mode
 */

 void lcd_Send_Command(uint8_t cmd)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
	/*RS = 0, for lcd Command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <lcd_Send_Command+0x40>)
 800077c:	f000 fcb2 	bl	80010e4 <GPIO_WriteToOutputPin>


	/* WR = 0, for write mode */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2101      	movs	r1, #1
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <lcd_Send_Command+0x40>)
 8000786:	f000 fcad 	bl	80010e4 <GPIO_WriteToOutputPin>

	//Send the higher 4 bits
	write_4_bits(cmd >> 4);
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	091b      	lsrs	r3, r3, #4
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ffb3 	bl	80006fc <write_4_bits>

	//Send the lower nibble
	write_4_bits(cmd & 0x0F);
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ffac 	bl	80006fc <write_4_bits>

}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40020000 	.word	0x40020000

080007b0 <Lcd_Print_char>:
 * 					D7  D5  D6  D4
 * Lower nibble	 -  1	0	0	1
 * 					D7	D6	D5	D4
 */
 void Lcd_Print_char(uint8_t data)
 {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
	 //1. Set the RS = 1 ( Data mode)
	 GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2100      	movs	r1, #0
 80007be:	480c      	ldr	r0, [pc, #48]	; (80007f0 <Lcd_Print_char+0x40>)
 80007c0:	f000 fc90 	bl	80010e4 <GPIO_WriteToOutputPin>

	 //2. Set WR = 0 , for (Write Mode)
	 GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2101      	movs	r1, #1
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <Lcd_Print_char+0x40>)
 80007ca:	f000 fc8b 	bl	80010e4 <GPIO_WriteToOutputPin>


	 //Send higher nibble
	 write_4_bits(data >> 4);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	091b      	lsrs	r3, r3, #4
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff91 	bl	80006fc <write_4_bits>

	 //Send Lower Nibble
	 write_4_bits(data & 0x0F);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 030f 	and.w	r3, r3, #15
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff8a 	bl	80006fc <write_4_bits>

 }
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40020000 	.word	0x40020000

080007f4 <Lcd_Display_clear>:
 /*
  * Helper function
  * ***********************Lcd_Display_clear********************
  */
void Lcd_Display_clear(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	//send the display cleaer commanf
	lcd_Send_Command(LCD_CMD_DIS_CLR);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff ffb7 	bl	800076c <lcd_Send_Command>
	mdelay(2);
 80007fe:	2002      	movs	r0, #2
 8000800:	f7ff ff3b 	bl	800067a <mdelay>

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <Lcd_Print_String>:
/*
 * *******************LCD Prnint String***********************************
 */

void Lcd_Print_String(char *message)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

	do
	{
		Lcd_Print_char((uint8_t)*message++);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ffc9 	bl	80007b0 <Lcd_Print_char>

		mdelay(5);
 800081e:	2005      	movs	r0, #5
 8000820:	f7ff ff2b 	bl	800067a <mdelay>

	}
	while (*message != '\0');
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f1      	bne.n	8000810 <Lcd_Print_String+0x8>

}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <main>:
#define TICK_HZ					1			//one interrupt for evry 1 sec



int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0

	RTC_date_t current_date;
	RTC_time_t current_time;
	lcd_Init();
 800083a:	f7ff fe5b 	bl	80004f4 <lcd_Init>


	//DS1307 initializtion
	if (ds1307_Init())				//if CH =1, then hangs here
 800083e:	f7ff fd37 	bl	80002b0 <ds1307_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d003      	beq.n	8000850 <main+0x1c>
	{
		printf("failed");
 8000848:	4822      	ldr	r0, [pc, #136]	; (80008d4 <main+0xa0>)
 800084a:	f001 fa4b 	bl	8001ce4 <iprintf>
		while (1);
 800084e:	e7fe      	b.n	800084e <main+0x1a>
	//set current time
	ds1307_set_current_time(&current_time);

#else
	//Get current time
	ds1307_get_current_time(&current_time);
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fd46 	bl	80002e4 <ds1307_get_current_time>
	//Get current data
	ds1307_get_current_date(&current_date);
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fd8a 	bl	8000376 <ds1307_get_current_date>


#endif

	//Calling systick init
	init_systick_timer(TICK_HZ);			//1 interrupt for every 1 sec, eg: 10 interrupt for evry 1 sec, so div by 10
 8000862:	2001      	movs	r0, #1
 8000864:	f000 f94c 	bl	8000b00 <init_systick_timer>

			char *am_pm = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
			if (current_time.time_format != TIME_FORMAT_24HRS)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d01a      	beq.n	80008a8 <main+0x74>
			{
				am_pm = (current_time.time_format) 	? 	"PM" : "AM" ;
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <main+0x48>
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <main+0xa4>)
 800087a:	e000      	b.n	800087e <main+0x4a>
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <main+0xa8>)
 800087e:	60fb      	str	r3, [r7, #12]
				//printf("Current time is = %s %s\n",time_to_string(&current_time),am_pm); 			//01:45:10
				LCD_Set_Cursor(1, 4);
 8000880:	2104      	movs	r1, #4
 8000882:	2001      	movs	r0, #1
 8000884:	f7ff fed2 	bl	800062c <LCD_Set_Cursor>
				Lcd_Print_String(time_to_string(&current_time));
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4618      	mov	r0, r3
 800088c:	f000 f8c6 	bl	8000a1c <time_to_string>
 8000890:	4603      	mov	r3, r0
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ffb8 	bl	8000808 <Lcd_Print_String>
				LCD_Set_Cursor(1, 10);
 8000898:	210a      	movs	r1, #10
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff fec6 	bl	800062c <LCD_Set_Cursor>
				Lcd_Print_String(am_pm);
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff ffb1 	bl	8000808 <Lcd_Print_String>
 80008a6:	e007      	b.n	80008b8 <main+0x84>

			}
			else	//24hr format
			{
				//printf("Current time is %s\n",time_to_string(&current_time));
				Lcd_Print_String(time_to_string(&current_time));
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f8b6 	bl	8000a1c <time_to_string>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ffa8 	bl	8000808 <Lcd_Print_String>



			//Print current day
			//printf("Current day = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
			LCD_Set_Cursor(2, 3);
 80008b8:	2103      	movs	r1, #3
 80008ba:	2002      	movs	r0, #2
 80008bc:	f7ff feb6 	bl	800062c <LCD_Set_Cursor>
			//Get current data
			Lcd_Print_String(date_to_string(&current_date));
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f8f1 	bl	8000aac <date_to_string>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff9b 	bl	8000808 <Lcd_Print_String>
		//	Lcd_Print_String(get_day_of_week(current_date.day));




	while(1);
 80008d2:	e7fe      	b.n	80008d2 <main+0x9e>
 80008d4:	08002878 	.word	0x08002878
 80008d8:	08002880 	.word	0x08002880
 80008dc:	08002884 	.word	0x08002884

080008e0 <SysTick_Handler>:



//systick handler
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0

		RTC_date_t current_date;
		RTC_time_t current_time;

		//Get current time
		ds1307_get_current_time(&current_time);
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fcfb 	bl	80002e4 <ds1307_get_current_time>


		LCD_Set_Cursor(1, 4);
 80008ee:	2104      	movs	r1, #4
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff fe9b 	bl	800062c <LCD_Set_Cursor>
		char *am_pm;
		if (current_time.time_format != TIME_FORMAT_24HRS)
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d016      	beq.n	800092a <SysTick_Handler+0x4a>
		{
			am_pm = (current_time.time_format) 	? 	"PM" : "AM" ;
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SysTick_Handler+0x26>
 8000902:	4b26      	ldr	r3, [pc, #152]	; (800099c <SysTick_Handler+0xbc>)
 8000904:	e000      	b.n	8000908 <SysTick_Handler+0x28>
 8000906:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <SysTick_Handler+0xc0>)
 8000908:	60fb      	str	r3, [r7, #12]
			Lcd_Print_String(time_to_string(&current_time));
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4618      	mov	r0, r3
 800090e:	f000 f885 	bl	8000a1c <time_to_string>
 8000912:	4603      	mov	r3, r0
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff77 	bl	8000808 <Lcd_Print_String>
			LCD_Set_Cursor(1, 13);
 800091a:	210d      	movs	r1, #13
 800091c:	2001      	movs	r0, #1
 800091e:	f7ff fe85 	bl	800062c <LCD_Set_Cursor>
			Lcd_Print_String(am_pm);
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f7ff ff70 	bl	8000808 <Lcd_Print_String>
 8000928:	e008      	b.n	800093c <SysTick_Handler+0x5c>
			//printf("%s",time_to_string(&current_time));
		}
		else	//24hr format
		{
			printf("Current time is %s\n",time_to_string(&current_time));
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f875 	bl	8000a1c <time_to_string>
 8000932:	4603      	mov	r3, r0
 8000934:	4619      	mov	r1, r3
 8000936:	481b      	ldr	r0, [pc, #108]	; (80009a4 <SysTick_Handler+0xc4>)
 8000938:	f001 f9d4 	bl	8001ce4 <iprintf>




		//Get current data
		ds1307_get_current_date(&current_date);
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fd18 	bl	8000376 <ds1307_get_current_date>
		LCD_Set_Cursor(2, 3);
 8000946:	2103      	movs	r1, #3
 8000948:	2002      	movs	r0, #2
 800094a:	f7ff fe6f 	bl	800062c <LCD_Set_Cursor>

		//Print current day
		//printf("Current day = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));

		 Lcd_Print_String(date_to_string(&current_date));
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f8aa 	bl	8000aac <date_to_string>
 8000958:	4603      	mov	r3, r0
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff54 	bl	8000808 <Lcd_Print_String>
		 LCD_Set_Cursor(2, 12);
 8000960:	210c      	movs	r1, #12
 8000962:	2002      	movs	r0, #2
 8000964:	f7ff fe62 	bl	800062c <LCD_Set_Cursor>
		 Lcd_Print_char('(');
 8000968:	2028      	movs	r0, #40	; 0x28
 800096a:	f7ff ff21 	bl	80007b0 <Lcd_Print_char>
		 LCD_Set_Cursor(2, 13);
 800096e:	210d      	movs	r1, #13
 8000970:	2002      	movs	r0, #2
 8000972:	f7ff fe5b 	bl	800062c <LCD_Set_Cursor>
		 Lcd_Print_String(get_day_of_week(current_date.day));
 8000976:	7afb      	ldrb	r3, [r7, #11]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f879 	bl	8000a70 <get_day_of_week>
 800097e:	4603      	mov	r3, r0
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff41 	bl	8000808 <Lcd_Print_String>
		 LCD_Set_Cursor(2, 16);
 8000986:	2110      	movs	r1, #16
 8000988:	2002      	movs	r0, #2
 800098a:	f7ff fe4f 	bl	800062c <LCD_Set_Cursor>
		 Lcd_Print_char(')');
 800098e:	2029      	movs	r0, #41	; 0x29
 8000990:	f7ff ff0e 	bl	80007b0 <Lcd_Print_char>


}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	08002880 	.word	0x08002880
 80009a0:	08002884 	.word	0x08002884
 80009a4:	08002888 	.word	0x08002888

080009a8 <number_to_string>:



//helper function
void number_to_string(uint8_t num, char* buf)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
	if (num < 10)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	2b09      	cmp	r3, #9
 80009b8:	d809      	bhi.n	80009ce <number_to_string+0x26>
	{
		buf[0] = '0';
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	2230      	movs	r2, #48	; 0x30
 80009be:	701a      	strb	r2, [r3, #0]
		buf[1] = (num + 48) ; 		//convert ascii equivalent
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	3301      	adds	r3, #1
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	3230      	adds	r2, #48	; 0x30
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	701a      	strb	r2, [r3, #0]
	{
		buf[0] = ((num /10) + 48);
		buf[1] = ((num % 10) + 48);
	}

}
 80009cc:	e01f      	b.n	8000a0e <number_to_string+0x66>
	else if (num >= 10 && num < 99)
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b09      	cmp	r3, #9
 80009d2:	d91c      	bls.n	8000a0e <number_to_string+0x66>
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b62      	cmp	r3, #98	; 0x62
 80009d8:	d819      	bhi.n	8000a0e <number_to_string+0x66>
		buf[0] = ((num /10) + 48);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <number_to_string+0x70>)
 80009de:	fba2 2303 	umull	r2, r3, r2, r3
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	3330      	adds	r3, #48	; 0x30
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	701a      	strb	r2, [r3, #0]
		buf[1] = ((num % 10) + 48);
 80009ee:	79fa      	ldrb	r2, [r7, #7]
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <number_to_string+0x70>)
 80009f2:	fba3 1302 	umull	r1, r3, r3, r2
 80009f6:	08d9      	lsrs	r1, r3, #3
 80009f8:	460b      	mov	r3, r1
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	440b      	add	r3, r1
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	3230      	adds	r2, #48	; 0x30
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	701a      	strb	r2, [r3, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	cccccccd 	.word	0xcccccccd

08000a1c <time_to_string>:

//hh:mm:ss (time to string)conversion
char* time_to_string(RTC_time_t *pRtc_time)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	static char buf[9]; // because total 9 bits

	buf[2] = ':';
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <time_to_string+0x48>)
 8000a26:	223a      	movs	r2, #58	; 0x3a
 8000a28:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <time_to_string+0x48>)
 8000a2c:	223a      	movs	r2, #58	; 0x3a
 8000a2e:	715a      	strb	r2, [r3, #5]

	number_to_string (pRtc_time->hours,buf);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	490b      	ldr	r1, [pc, #44]	; (8000a64 <time_to_string+0x48>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ffb6 	bl	80009a8 <number_to_string>
	number_to_string (pRtc_time->minute,&buf[3]);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	785b      	ldrb	r3, [r3, #1]
 8000a40:	4909      	ldr	r1, [pc, #36]	; (8000a68 <time_to_string+0x4c>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ffb0 	bl	80009a8 <number_to_string>
	number_to_string (pRtc_time->seconds,&buf[6]);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	789b      	ldrb	r3, [r3, #2]
 8000a4c:	4907      	ldr	r1, [pc, #28]	; (8000a6c <time_to_string+0x50>)
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ffaa 	bl	80009a8 <number_to_string>

	buf[8] = '\0';
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <time_to_string+0x48>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	721a      	strb	r2, [r3, #8]

	return buf;
 8000a5a:	4b02      	ldr	r3, [pc, #8]	; (8000a64 <time_to_string+0x48>)
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	2000009c 	.word	0x2000009c
 8000a68:	2000009f 	.word	0x2000009f
 8000a6c:	200000a2 	.word	0x200000a2

08000a70 <get_day_of_week>:

/*
 * Get the day of week
 */
char* get_day_of_week(uint8_t i)
{
 8000a70:	b4b0      	push	{r4, r5, r7}
 8000a72:	b08b      	sub	sp, #44	; 0x2c
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	char* day[] = {"SUN","MON","TUE", "WED","THU","FRI","SAT"};
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <get_day_of_week+0x38>)
 8000a7c:	f107 040c 	add.w	r4, r7, #12
 8000a80:	461d      	mov	r5, r3
 8000a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return day[i-1];
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a98:	4413      	add	r3, r2
 8000a9a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	372c      	adds	r7, #44	; 0x2c
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bcb0      	pop	{r4, r5, r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	080028b8 	.word	0x080028b8

08000aac <date_to_string>:
 * Get date to string
 */

//dd/mm/yy
char* date_to_string(RTC_date_t *pRtc_date)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = '/';
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <date_to_string+0x48>)
 8000ab6:	222f      	movs	r2, #47	; 0x2f
 8000ab8:	709a      	strb	r2, [r3, #2]
	buf[5] = '/';
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <date_to_string+0x48>)
 8000abc:	222f      	movs	r2, #47	; 0x2f
 8000abe:	715a      	strb	r2, [r3, #5]

	number_to_string(pRtc_date->date, buf);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	490b      	ldr	r1, [pc, #44]	; (8000af4 <date_to_string+0x48>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff6e 	bl	80009a8 <number_to_string>
	number_to_string(pRtc_date->month, &buf[3]);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	785b      	ldrb	r3, [r3, #1]
 8000ad0:	4909      	ldr	r1, [pc, #36]	; (8000af8 <date_to_string+0x4c>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff68 	bl	80009a8 <number_to_string>
	number_to_string(pRtc_date->year, &buf[6]);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	789b      	ldrb	r3, [r3, #2]
 8000adc:	4907      	ldr	r1, [pc, #28]	; (8000afc <date_to_string+0x50>)
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ff62 	bl	80009a8 <number_to_string>

	buf[8] = '\0';
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <date_to_string+0x48>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	721a      	strb	r2, [r3, #8]

	return buf;
 8000aea:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <date_to_string+0x48>)

}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200000a8 	.word	0x200000a8
 8000af8:	200000ab 	.word	0x200000ab
 8000afc:	200000ae 	.word	0x200000ae

08000b00 <init_systick_timer>:
/*
 * Systick interrupt generation for every 1 sec. to get time and date
 */

void init_systick_timer(uint32_t tick_hz)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	//	Configuring the base address of systick register
	uint32_t *pSTRVR = (uint32_t*)0xE000E014;			//Reload value register
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <init_systick_timer+0x64>)
 8000b0a:	617b      	str	r3, [r7, #20]
	uint32_t *pSTCSR = (uint32_t*)0xE000E010;			//Control and status register
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <init_systick_timer+0x68>)
 8000b0e:	613b      	str	r3, [r7, #16]

	//Calculation of Reload Vaue
	uint32_t count_value = (( SYSTICK_TIM_CLICK / tick_hz) - 1);			//1 interrupt for evry 1 sec
 8000b10:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <init_systick_timer+0x6c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]

	//Clear the value for Reload value register
	*pSTRVR &= ~(0x00FFFFFF);
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	601a      	str	r2, [r3, #0]

	//Load the the value to Reload value register
	*pSTRVR |= (count_value);
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	601a      	str	r2, [r3, #0]

	//Configuring the control and status register
	*pSTCSR |=  ( 1 << 1);			//TICKINT bit to generate interrrupt
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f043 0202 	orr.w	r2, r3, #2
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	601a      	str	r2, [r3, #0]

	*pSTCSR |= ( 1 << 2 ); 			//To set the clock source as processor clock
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f043 0204 	orr.w	r2, r3, #4
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	601a      	str	r2, [r3, #0]

	*pSTCSR |= ( 1 << 0 );			//Enable the systick Timer
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f043 0201 	orr.w	r2, r3, #1
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	601a      	str	r2, [r3, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	371c      	adds	r7, #28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e014 	.word	0xe000e014
 8000b68:	e000e010 	.word	0xe000e010
 8000b6c:	00f42400 	.word	0x00f42400

08000b70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <_sbrk+0x50>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x16>
		heap_end = &end;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <_sbrk+0x50>)
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <_sbrk+0x54>)
 8000b84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <_sbrk+0x50>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <_sbrk+0x50>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	466a      	mov	r2, sp
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d907      	bls.n	8000baa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b9a:	f000 ff4d 	bl	8001a38 <__errno>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	230c      	movs	r3, #12
 8000ba2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	e006      	b.n	8000bb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <_sbrk+0x50>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <_sbrk+0x50>)
 8000bb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000b4 	.word	0x200000b4
 8000bc4:	20000180 	.word	0x20000180

08000bc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480d      	ldr	r0, [pc, #52]	; (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490e      	ldr	r1, [pc, #56]	; (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0b      	ldr	r4, [pc, #44]	; (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bf2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000bf6:	f000 ffef 	bl	8001bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bfa:	f7ff fe1b 	bl	8000834 <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   r0, =_estack
 8000c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000c0c:	08002974 	.word	0x08002974
  ldr r2, =_sbss
 8000c10:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000c14:	20000180 	.word	0x20000180

08000c18 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <GPIO_PeriClockControl>:
  *
  *	@Note				- none

*/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,uint8_t EnorDI){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	70fb      	strb	r3, [r7, #3]

	if(EnorDI == ENABLE){
 8000c28:	78fb      	ldrb	r3, [r7, #3]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d157      	bne.n	8000cde <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a59      	ldr	r2, [pc, #356]	; (8000d98 <GPIO_PeriClockControl+0x17c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d106      	bne.n	8000c44 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000c36:	4b59      	ldr	r3, [pc, #356]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a58      	ldr	r2, [pc, #352]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if(pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 8000c42:	e0a3      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB){
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a56      	ldr	r2, [pc, #344]	; (8000da0 <GPIO_PeriClockControl+0x184>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d106      	bne.n	8000c5a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000c4c:	4b53      	ldr	r3, [pc, #332]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a52      	ldr	r2, [pc, #328]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c58:	e098      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC){
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a51      	ldr	r2, [pc, #324]	; (8000da4 <GPIO_PeriClockControl+0x188>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d106      	bne.n	8000c70 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000c62:	4b4e      	ldr	r3, [pc, #312]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a4d      	ldr	r2, [pc, #308]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c6e:	e08d      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD){
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a4d      	ldr	r2, [pc, #308]	; (8000da8 <GPIO_PeriClockControl+0x18c>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d106      	bne.n	8000c86 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000c78:	4b48      	ldr	r3, [pc, #288]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	4a47      	ldr	r2, [pc, #284]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000c7e:	f043 0308 	orr.w	r3, r3, #8
 8000c82:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c84:	e082      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE){
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a48      	ldr	r2, [pc, #288]	; (8000dac <GPIO_PeriClockControl+0x190>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d106      	bne.n	8000c9c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000c8e:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a42      	ldr	r2, [pc, #264]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c9a:	e077      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF){
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a44      	ldr	r2, [pc, #272]	; (8000db0 <GPIO_PeriClockControl+0x194>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d106      	bne.n	8000cb2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	4a3c      	ldr	r2, [pc, #240]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000caa:	f043 0320 	orr.w	r3, r3, #32
 8000cae:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cb0:	e06c      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG){
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a3f      	ldr	r2, [pc, #252]	; (8000db4 <GPIO_PeriClockControl+0x198>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d106      	bne.n	8000cc8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000cba:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a37      	ldr	r2, [pc, #220]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cc6:	e061      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH){
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a3b      	ldr	r2, [pc, #236]	; (8000db8 <GPIO_PeriClockControl+0x19c>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d15d      	bne.n	8000d8c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000cd0:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a31      	ldr	r2, [pc, #196]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cdc:	e056      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a2d      	ldr	r2, [pc, #180]	; (8000d98 <GPIO_PeriClockControl+0x17c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d106      	bne.n	8000cf4 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a2c      	ldr	r2, [pc, #176]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000cec:	f023 0301 	bic.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cf2:	e04b      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB){
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <GPIO_PeriClockControl+0x184>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d106      	bne.n	8000d0a <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a26      	ldr	r2, [pc, #152]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000d02:	f023 0302 	bic.w	r3, r3, #2
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d08:	e040      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC){
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a25      	ldr	r2, [pc, #148]	; (8000da4 <GPIO_PeriClockControl+0x188>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d106      	bne.n	8000d20 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000d12:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000d18:	f023 0304 	bic.w	r3, r3, #4
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d1e:	e035      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD){
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a21      	ldr	r2, [pc, #132]	; (8000da8 <GPIO_PeriClockControl+0x18c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d106      	bne.n	8000d36 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000d2e:	f023 0308 	bic.w	r3, r3, #8
 8000d32:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d34:	e02a      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE){
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <GPIO_PeriClockControl+0x190>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d106      	bne.n	8000d4c <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000d44:	f023 0310 	bic.w	r3, r3, #16
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d4a:	e01f      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF){
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <GPIO_PeriClockControl+0x194>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d106      	bne.n	8000d62 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000d5a:	f023 0320 	bic.w	r3, r3, #32
 8000d5e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d60:	e014      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG){
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <GPIO_PeriClockControl+0x198>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d106      	bne.n	8000d78 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d76:	e009      	b.n	8000d8c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH){
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <GPIO_PeriClockControl+0x19c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d105      	bne.n	8000d8c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <GPIO_PeriClockControl+0x180>)
 8000d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020400 	.word	0x40020400
 8000da4:	40020800 	.word	0x40020800
 8000da8:	40020c00 	.word	0x40020c00
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40021400 	.word	0x40021400
 8000db4:	40021800 	.word	0x40021800
 8000db8:	40021c00 	.word	0x40021c00

08000dbc <GPIO_Init>:
  *
  *	@Note				- none

*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
     GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff26 	bl	8000c1c <GPIO_PeriClockControl>
	uint32_t temp =0; 			//Take a temporvary variable
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

	//1) Configure the mode of GPIO Pin(<=3(analog mode macros is called non-interrupt mode)

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG )
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	795b      	ldrb	r3, [r3, #5]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d81f      	bhi.n	8000e1c <GPIO_Init+0x60>
	{
		//Non interrupt Mode

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //multi 2 is because each register takes 2 bits to config.
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	795b      	ldrb	r3, [r3, #5]
 8000de0:	461a      	mov	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	791b      	ldrb	r3, [r3, #4]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);						  //Clearing the bit at specific bitfields.
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	4619      	mov	r1, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	400a      	ands	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6819      	ldr	r1, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	430a      	orrs	r2, r1
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e0bc      	b.n	8000f96 <GPIO_Init+0x1da>

	else
	{

		//greater than 3 is called interrupt Mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_FT){
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	795b      	ldrb	r3, [r3, #5]
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d117      	bne.n	8000e54 <GPIO_Init+0x98>
			//1. Configure FTSR register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e24:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <GPIO_Init+0x184>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	7912      	ldrb	r2, [r2, #4]
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	2201      	movs	r2, #1
 8000e30:	408a      	lsls	r2, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	4a42      	ldr	r2, [pc, #264]	; (8000f40 <GPIO_Init+0x184>)
 8000e36:	430b      	orrs	r3, r1
 8000e38:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e3a:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <GPIO_Init+0x184>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	7912      	ldrb	r2, [r2, #4]
 8000e42:	4611      	mov	r1, r2
 8000e44:	2201      	movs	r2, #1
 8000e46:	408a      	lsls	r2, r1
 8000e48:	43d2      	mvns	r2, r2
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4a3c      	ldr	r2, [pc, #240]	; (8000f40 <GPIO_Init+0x184>)
 8000e4e:	400b      	ands	r3, r1
 8000e50:	6093      	str	r3, [r2, #8]
 8000e52:	e035      	b.n	8000ec0 <GPIO_Init+0x104>


		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_RT){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	795b      	ldrb	r3, [r3, #5]
 8000e58:	2b05      	cmp	r3, #5
 8000e5a:	d117      	bne.n	8000e8c <GPIO_Init+0xd0>
			//1. Configure the RTSR Register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e5c:	4b38      	ldr	r3, [pc, #224]	; (8000f40 <GPIO_Init+0x184>)
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	7912      	ldrb	r2, [r2, #4]
 8000e64:	4611      	mov	r1, r2
 8000e66:	2201      	movs	r2, #1
 8000e68:	408a      	lsls	r2, r1
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4a34      	ldr	r2, [pc, #208]	; (8000f40 <GPIO_Init+0x184>)
 8000e6e:	430b      	orrs	r3, r1
 8000e70:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e72:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <GPIO_Init+0x184>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	7912      	ldrb	r2, [r2, #4]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	408a      	lsls	r2, r1
 8000e80:	43d2      	mvns	r2, r2
 8000e82:	4611      	mov	r1, r2
 8000e84:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <GPIO_Init+0x184>)
 8000e86:	400b      	ands	r3, r1
 8000e88:	60d3      	str	r3, [r2, #12]
 8000e8a:	e019      	b.n	8000ec0 <GPIO_Init+0x104>



		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_IT_RFT ){
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	795b      	ldrb	r3, [r3, #5]
 8000e90:	2b06      	cmp	r3, #6
 8000e92:	d115      	bne.n	8000ec0 <GPIO_Init+0x104>
			//1. Configure the Both RTS AND FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <GPIO_Init+0x184>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	7912      	ldrb	r2, [r2, #4]
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	408a      	lsls	r2, r1
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <GPIO_Init+0x184>)
 8000ea6:	430b      	orrs	r3, r1
 8000ea8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000eaa:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <GPIO_Init+0x184>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	7912      	ldrb	r2, [r2, #4]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	408a      	lsls	r2, r1
 8000eb8:	4611      	mov	r1, r2
 8000eba:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <GPIO_Init+0x184>)
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	6093      	str	r3, [r2, #8]
		}


		//2. Configure the GPIO Port Selection in SYSCFG_Register

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;			// pinnumber/4 (because 4 registers)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	791b      	ldrb	r3, [r3, #4]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	791b      	ldrb	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	74bb      	strb	r3, [r7, #18]
		SYSCFG_PCLK_EN();														// clock enable
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <GPIO_Init+0x188>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <GPIO_Init+0x188>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t portcode = GPIO_BASEADDR_TO_PORTCODE (pGPIOHandle->pGPIOx);		// macro
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <GPIO_Init+0x18c>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d03f      	beq.n	8000f68 <GPIO_Init+0x1ac>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <GPIO_Init+0x190>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d024      	beq.n	8000f3c <GPIO_Init+0x180>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <GPIO_Init+0x194>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d01d      	beq.n	8000f38 <GPIO_Init+0x17c>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <GPIO_Init+0x198>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <GPIO_Init+0x172>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <GPIO_Init+0x19c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d00e      	beq.n	8000f2e <GPIO_Init+0x172>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <GPIO_Init+0x1a0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d009      	beq.n	8000f2e <GPIO_Init+0x172>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <GPIO_Init+0x1a4>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d004      	beq.n	8000f2e <GPIO_Init+0x172>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <GPIO_Init+0x1a8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <GPIO_Init+0x176>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <GPIO_Init+0x178>
 8000f32:	2300      	movs	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	e018      	b.n	8000f6a <GPIO_Init+0x1ae>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	e016      	b.n	8000f6a <GPIO_Init+0x1ae>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e014      	b.n	8000f6a <GPIO_Init+0x1ae>
 8000f40:	40013c00 	.word	0x40013c00
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	40020400 	.word	0x40020400
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020c00 	.word	0x40020c00
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40021400 	.word	0x40021400
 8000f60:	40021800 	.word	0x40021800
 8000f64:	40021c00 	.word	0x40021c00
 8000f68:	2300      	movs	r3, #0
 8000f6a:	747b      	strb	r3, [r7, #17]

		SYSCFG->EXTICR[temp1] = portcode << (temp2 *4);
 8000f6c:	7c7a      	ldrb	r2, [r7, #17]
 8000f6e:	7cbb      	ldrb	r3, [r7, #18]
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	fa02 f103 	lsl.w	r1, r2, r3
 8000f76:	4a59      	ldr	r2, [pc, #356]	; (80010dc <GPIO_Init+0x320>)
 8000f78:	7cfb      	ldrb	r3, [r7, #19]
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable interrupt Delivery using IMR (Interrupt Mask Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f80:	4b57      	ldr	r3, [pc, #348]	; (80010e0 <GPIO_Init+0x324>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	7912      	ldrb	r2, [r2, #4]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	408a      	lsls	r2, r1
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4a53      	ldr	r2, [pc, #332]	; (80010e0 <GPIO_Init+0x324>)
 8000f92:	430b      	orrs	r3, r1
 8000f94:	6013      	str	r3, [r2, #0]


	}

	//2) Configure the speed
	temp = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	799b      	ldrb	r3, [r3, #6]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	791b      	ldrb	r3, [r3, #4]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clearing the Bit
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	791b      	ldrb	r3, [r3, #4]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	2303      	movs	r3, #3
 8000fba:	408b      	lsls	r3, r1
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	400a      	ands	r2, r1
 8000fc6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6899      	ldr	r1, [r3, #8]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	609a      	str	r2, [r3, #8]



	//3) Configure the Pullup/PullDown
	temp = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	79db      	ldrb	r3, [r3, #7]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	791b      	ldrb	r3, [r3, #4]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	791b      	ldrb	r3, [r3, #4]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	408b      	lsls	r3, r1
 8000ffe:	43db      	mvns	r3, r3
 8001000:	4619      	mov	r1, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	400a      	ands	r2, r1
 8001008:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68d9      	ldr	r1, [r3, #12]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	430a      	orrs	r2, r1
 8001018:	60da      	str	r2, [r3, #12]
	temp = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]

	//4) Configure the Optype
	temp = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7a1b      	ldrb	r3, [r3, #8]
 8001026:	461a      	mov	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 <<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	791b      	ldrb	r3, [r3, #4]
 800103c:	4619      	mov	r1, r3
 800103e:	2301      	movs	r3, #1
 8001040:	408b      	lsls	r3, r1
 8001042:	43db      	mvns	r3, r3
 8001044:	4619      	mov	r1, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	400a      	ands	r2, r1
 800104c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6859      	ldr	r1, [r3, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	430a      	orrs	r2, r1
 800105c:	605a      	str	r2, [r3, #4]
	temp =0;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]

	//5) Configure Alternate function register
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	795b      	ldrb	r3, [r3, #5]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d133      	bne.n	80010d2 <GPIO_Init+0x316>
	{
		//configure the alternate function
		// Creating the Two variables

		uint8_t temp1,temp2 = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	743b      	strb	r3, [r7, #16]

		temp1= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	791b      	ldrb	r3, [r3, #4]
 8001072:	08db      	lsrs	r3, r3, #3
 8001074:	73fb      	strb	r3, [r7, #15]
		temp2= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	791b      	ldrb	r3, [r3, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	743b      	strb	r3, [r7, #16]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~ (0xF << (4*temp2));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	3208      	adds	r2, #8
 8001088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800108c:	7c3b      	ldrb	r3, [r7, #16]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	4001      	ands	r1, r0
 80010a2:	3208      	adds	r2, #8
 80010a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2) ) ;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	3208      	adds	r2, #8
 80010b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7a5b      	ldrb	r3, [r3, #9]
 80010b8:	461a      	mov	r2, r3
 80010ba:	7c3b      	ldrb	r3, [r7, #16]
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	4301      	orrs	r1, r0
 80010cc:	3208      	adds	r2, #8
 80010ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}


	}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40013800 	.word	0x40013800
 80010e0:	40013c00 	.word	0x40013c00

080010e4 <GPIO_WriteToOutputPin>:
  *	@Note				- none

*/

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber,uint8_t value) 	//Write to Output Pin(Base address of the GPIO and Pin Number,value(1 or 0)(void because it's write)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
 80010f0:	4613      	mov	r3, r2
 80010f2:	70bb      	strb	r3, [r7, #2]
	if(value == GPIO_PIN_SET)
 80010f4:	78bb      	ldrb	r3, [r7, #2]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d109      	bne.n	800110e <GPIO_WriteToOutputPin+0x2a>
	{
		//Write 1 as the value to the register at the bit field with the pinNumber
		pGPIOx->ODR |= (1 << PinNumber);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	78fa      	ldrb	r2, [r7, #3]
 8001100:	2101      	movs	r1, #1
 8001102:	fa01 f202 	lsl.w	r2, r1, r2
 8001106:	431a      	orrs	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	615a      	str	r2, [r3, #20]
	{
		//Write 0 as the value to the register
		pGPIOx->ODR &= ~(1 << PinNumber);
	}

}
 800110c:	e009      	b.n	8001122 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	78fa      	ldrb	r2, [r7, #3]
 8001114:	2101      	movs	r1, #1
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	43d2      	mvns	r2, r2
 800111c:	401a      	ands	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	615a      	str	r2, [r3, #20]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <I2C_GenerateStartCondition>:
static void I2C_MasterHandlerRxNEInterrupt(I2C_Handle_t *pI2C_Handle);


/*********************************************************Helper Functions***************************************/
void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1 |= ( 1 << I2C_CR1_START);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	70fb      	strb	r3, [r7, #3]
	//shift register by 1 , to fill r/w bit
	SlaveAddr = SlaveAddr << 1 ;
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);							//To clear the first bit (Slave address + r/w bit ) W=0;
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	70fb      	strb	r3, [r7, #3]
	//put into Data buffer
	pI2Cx->DR = SlaveAddr;
 8001164:	78fa      	ldrb	r2, [r7, #3]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	611a      	str	r2, [r3, #16]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
	//Shift the register by 1, to fill R/W bit
	SlaveAddr = SlaveAddr <<1;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1;
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	70fb      	strb	r3, [r7, #3]
	//Put into Data Register
	pI2Cx->DR = SlaveAddr;
 800118e:	78fa      	ldrb	r2, [r7, #3]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	611a      	str	r2, [r3, #16]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2C_Handle)						//For non blocking api's refer blocking api , before
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;

	//Check for the device is Master mode or Slave mode
	if ( pI2C_Handle->pI2Cx->SR2 & ( 1<< I2C_SR2_MSL) )
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d01f      	beq.n	80011f4 <I2C_ClearADDRFlag+0x56>
	{
		//The Device in Master Mode***

			//Lets first check the staete
			if ( pI2C_Handle->TxRxState == I2C_BUSY_IN_RX)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7d9b      	ldrb	r3, [r3, #22]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d112      	bne.n	80011e2 <I2C_ClearADDRFlag+0x44>
			{
					//Then lets check the Length
					if ( pI2C_Handle->RxSize == 1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7e1b      	ldrb	r3, [r3, #24]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d11f      	bne.n	8001204 <I2C_ClearADDRFlag+0x66>
					{
							//Then diable the ACK
							I2C_ManagaeAcking(pI2C_Handle->pI2Cx, I2C_ACK_DISABLE);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f82d 	bl	800122a <I2C_ManagaeAcking>

							//Then clear the ADDR flag(Read SR1, followed by SR2)
							dummyRead = pI2C_Handle->pI2Cx->SR1;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	60fb      	str	r3, [r7, #12]
							dummyRead= pI2C_Handle->pI2Cx->SR2;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	60fb      	str	r3, [r7, #12]
									dummyRead = pI2C_Handle->pI2Cx->SR2;
									(void )dummyRead;

	}

}
 80011e0:	e010      	b.n	8001204 <I2C_ClearADDRFlag+0x66>
							dummyRead = pI2C_Handle->pI2Cx->SR1;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	60fb      	str	r3, [r7, #12]
							dummyRead =  pI2C_Handle->pI2Cx->SR2;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	60fb      	str	r3, [r7, #12]
}
 80011f2:	e007      	b.n	8001204 <I2C_ClearADDRFlag+0x66>
									dummyRead = pI2C_Handle->pI2Cx->SR1;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	60fb      	str	r3, [r7, #12]
									dummyRead = pI2C_Handle->pI2Cx->SR2;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	60fb      	str	r3, [r7, #12]
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1  |= ( 1 << I2C_CR1_STOP );
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <I2C_ManagaeAcking>:
}



void I2C_ManagaeAcking(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == I2C_ACK_ENABLE)
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d105      	bne.n	8001248 <I2C_ManagaeAcking+0x1e>
	{
		pI2Cx->I2C_CR1 |= ( 1 << I2C_CR1_ACK);		//Enable
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	601a      	str	r2, [r3, #0]
	}
	if (EnorDi == I2C_ACK_DISABLE)
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d105      	bne.n	800125a <I2C_ManagaeAcking+0x30>
	{
		pI2Cx->I2C_CR1 &= ~( 1 << I2C_CR1_ACK); //Disable
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	601a      	str	r2, [r3, #0]
	}
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <I2C_PeriClockControl>:
  *
  *	@Note				- none

*/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDI)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
	if (EnorDI == ENABLE)
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d120      	bne.n	80012b8 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a22      	ldr	r2, [pc, #136]	; (8001304 <I2C_PeriClockControl+0xa0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d106      	bne.n	800128c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <I2C_PeriClockControl+0xa4>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a21      	ldr	r2, [pc, #132]	; (8001308 <I2C_PeriClockControl+0xa4>)
 8001284:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
		else if (pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 800128a:	e035      	b.n	80012f8 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a1f      	ldr	r2, [pc, #124]	; (800130c <I2C_PeriClockControl+0xa8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d106      	bne.n	80012a2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <I2C_PeriClockControl+0xa4>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <I2C_PeriClockControl+0xa4>)
 800129a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800129e:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012a0:	e02a      	b.n	80012f8 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a1a      	ldr	r2, [pc, #104]	; (8001310 <I2C_PeriClockControl+0xac>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d126      	bne.n	80012f8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <I2C_PeriClockControl+0xa4>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a16      	ldr	r2, [pc, #88]	; (8001308 <I2C_PeriClockControl+0xa4>)
 80012b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012b6:	e01f      	b.n	80012f8 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <I2C_PeriClockControl+0xa0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d106      	bne.n	80012ce <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <I2C_PeriClockControl+0xa4>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	4a10      	ldr	r2, [pc, #64]	; (8001308 <I2C_PeriClockControl+0xa4>)
 80012c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012cc:	e014      	b.n	80012f8 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C2)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a0e      	ldr	r2, [pc, #56]	; (800130c <I2C_PeriClockControl+0xa8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d106      	bne.n	80012e4 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <I2C_PeriClockControl+0xa4>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <I2C_PeriClockControl+0xa4>)
 80012dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012e2:	e009      	b.n	80012f8 <I2C_PeriClockControl+0x94>
		else if (pI2Cx == I2C3)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <I2C_PeriClockControl+0xac>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d105      	bne.n	80012f8 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <I2C_PeriClockControl+0xa4>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a05      	ldr	r2, [pc, #20]	; (8001308 <I2C_PeriClockControl+0xa4>)
 80012f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40005400 	.word	0x40005400
 8001308:	40023800 	.word	0x40023800
 800130c:	40005800 	.word	0x40005800
 8001310:	40005c00 	.word	0x40005c00

08001314 <I2C_Init>:
  *
  *	@Note				- none

*/
void I2C_Init(I2C_Handle_t  *pI2C_Handle_t)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	//.Creating the temp variable and trise variable

	uint32_t tempreg = 0 ;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]

	//Enable the I2C peripheral Clock
	I2C_PeriClockControl(pI2C_Handle_t->pI2Cx, ENABLE);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff9c 	bl	8001264 <I2C_PeriClockControl>


	//1. ACK control Bit
	//tempreg |= (pI2C_Handle_t->I2C_Config.I2C_ACKControl   << I2C_CR1_ACK) ;
	 pI2C_Handle_t->pI2Cx->I2C_CR1 |= ( 1 << 10);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800133a:	601a      	str	r2, [r3, #0]

	//2. Configure the FREQ field

	tempreg = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U ;   //Because we want only the number. eg 16
 8001340:	f000 f9ce 	bl	80016e0 <RCC_GetPCLK1Value>
 8001344:	4602      	mov	r2, r0
 8001346:	4b4e      	ldr	r3, [pc, #312]	; (8001480 <I2C_Init+0x16c>)
 8001348:	fba3 2302 	umull	r2, r3, r3, r2
 800134c:	0c9b      	lsrs	r3, r3, #18
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
	pI2C_Handle_t->pI2Cx->I2C_CR2 = (tempreg & 0x3F);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800135e:	605a      	str	r2, [r3, #4]

	//3. Configure the device own  address in OWN register

	tempreg= 0 ;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2C_Handle_t->I2C_Config.I2C_DeviceAddress  << 1 );  // Because 1st bit is dont care in 7bit addressing Mode
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7a1b      	ldrb	r3, [r3, #8]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
	//Read reference manual 14th bit kept at 1 by software (Reserved)
	tempreg |= (1 << 14);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001378:	60fb      	str	r3, [r7, #12]
	pI2C_Handle_t->pI2Cx->OAR1 = tempreg;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	609a      	str	r2, [r3, #8]
	//Read reference manual 14th bit kept at1 by software

	//4. CCR calculation

	uint16_t ccr_value = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]

	//First to find the Speed mode

	if (pI2C_Handle_t->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4a3d      	ldr	r2, [pc, #244]	; (8001484 <I2C_Init+0x170>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d80f      	bhi.n	80013b4 <I2C_Init+0xa0>
	{
		//Then it is standard Mode
		//By default the standard Mode is configured in CCR Register in 15th Bit
		//calculation for CCR in SM mode

		ccr_value = (RCC_GetPCLK1Value() / (2* pI2C_Handle_t->I2C_Config.I2C_SCLSpeed) );  // CCR = pclock / (2* SCK by user)
 8001394:	f000 f9a4 	bl	80016e0 <RCC_GetPCLK1Value>
 8001398:	4602      	mov	r2, r0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a4:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF); //masking only ccr bit fields
 80013a6:	897b      	ldrh	r3, [r7, #10]
 80013a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e02d      	b.n	8001410 <I2C_Init+0xfc>
	else
	{
		//the mode is Fast Mode
		//Set fast mode in Bit 15th

		tempreg |= (1 << 15);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ba:	60fb      	str	r3, [r7, #12]
		//then set the duty cycle

		tempreg |= (pI2C_Handle_t->I2C_Config.I2C_FMDuty_Cycle <<  14 );
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	895b      	ldrh	r3, [r3, #10]
 80013c0:	039b      	lsls	r3, r3, #14
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
		//Based on duty cycle use formular

		if (pI2C_Handle_t->I2C_Config.I2C_FMDuty_Cycle == I2C_FM_DUTY_2)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	895b      	ldrh	r3, [r3, #10]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10b      	bne.n	80013ea <I2C_Init+0xd6>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2C_Handle_t->I2C_Config.I2C_SCLSpeed));
 80013d2:	f000 f985 	bl	80016e0 <RCC_GetPCLK1Value>
 80013d6:	4601      	mov	r1, r0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e6:	817b      	strh	r3, [r7, #10]
 80013e8:	e00c      	b.n	8001404 <I2C_Init+0xf0>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2C_Handle_t->I2C_Config.I2C_SCLSpeed));
 80013ea:	f000 f979 	bl	80016e0 <RCC_GetPCLK1Value>
 80013ee:	4601      	mov	r1, r0
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	009a      	lsls	r2, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001402:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8001404:	897b      	ldrh	r3, [r7, #10]
 8001406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]
	}
	pI2C_Handle_t->pI2Cx->CCR |= tempreg;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	69d9      	ldr	r1, [r3, #28]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	430a      	orrs	r2, r1
 800141e:	61da      	str	r2, [r3, #28]


		//5.  TRISE configuration
		//First check the Mode Sm or Fm

	if (pI2C_Handle_t->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	4a17      	ldr	r2, [pc, #92]	; (8001484 <I2C_Init+0x170>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10b      	bne.n	8001442 <I2C_Init+0x12e>
	{
		//Mode is Standard Mode
		tempreg = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
		tempreg = (RCC_GetPCLK1Value()  / 1000000U ) + 1 	;//Formula : (Pclk1 * Trise)+1 ,  we can simply say , trise = 1us ,so we divide by 1MHZ
 800142e:	f000 f957 	bl	80016e0 <RCC_GetPCLK1Value>
 8001432:	4602      	mov	r2, r0
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <I2C_Init+0x16c>)
 8001436:	fba3 2302 	umull	r2, r3, r3, r2
 800143a:	0c9b      	lsrs	r3, r3, #18
 800143c:	3301      	adds	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e00f      	b.n	8001462 <I2C_Init+0x14e>

	}
	else
	{
		//Mode is Fast Mode
		tempreg =0;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
		tempreg = ( (RCC_GetPCLK1Value() * 300 ) / 1000000000U ) +1;					//Fast Mode trise = 300ns
 8001446:	f000 f94b 	bl	80016e0 <RCC_GetPCLK1Value>
 800144a:	4602      	mov	r2, r0
 800144c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001450:	fb03 f302 	mul.w	r3, r3, r2
 8001454:	0a5b      	lsrs	r3, r3, #9
 8001456:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <I2C_Init+0x174>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	09db      	lsrs	r3, r3, #7
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
	}

	pI2C_Handle_t->pI2Cx->TRISE |= (tempreg & 0x3F);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6a19      	ldr	r1, [r3, #32]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	621a      	str	r2, [r3, #32]


}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	431bde83 	.word	0x431bde83
 8001484:	000186a0 	.word	0x000186a0
 8001488:	00044b83 	.word	0x00044b83

0800148c <I2C_MasterSendData>:
  *	@Note				- none

*/

void I2C_MasterSendData (I2C_Handle_t *pI2C_Handle_t , uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	70fb      	strb	r3, [r7, #3]
	//1.	Generate the Start Conditioin(creating helper function)
	I2C_GenerateStartCondition(pI2C_Handle_t->pI2Cx);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fe44 	bl	800112c <I2C_GenerateStartCondition>

	//2. 	Confirm the start Generation is completed by checking the SB flag in the SR1 Register
	//		note : Utill the SB is cleared the SCL will be stretched (Pulled to Low)
	//		wait untill the SB is cleared
	while( !  I2C_Get_FlagStatus(pI2C_Handle_t->pI2Cx, I2C_FLAG_SR1_SB) );
 80014a4:	bf00      	nop
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2101      	movs	r1, #1
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f8fd 	bl	80016ac <I2C_Get_FlagStatus>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f6      	beq.n	80014a6 <I2C_MasterSendData+0x1a>


	//3.	Send the Address of the slave with r/w bit , Set to W(0)  (Total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2C_Handle_t->pI2Cx, SlaveAddr);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	78fa      	ldrb	r2, [r7, #3]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe42 	bl	800114a <I2C_ExecuteAddressPhaseWrite>

	//4. 	Confirm the address phase is completed by Checking in ADDR flag in SR1 register
	while( !  I2C_Get_FlagStatus(pI2C_Handle_t->pI2Cx, I2C_FLAG_SR1_ADDR) );
 80014c6:	bf00      	nop
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2102      	movs	r1, #2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f8ec 	bl	80016ac <I2C_Get_FlagStatus>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f6      	beq.n	80014c8 <I2C_MasterSendData+0x3c>

	//5.	 Clear the ADDR flag according to its software Sequence
	//		 ADDR FLAG can be cleared by reading SR1 and SR2 , check RM in SR1 register
	I2C_ClearADDRFlag(pI2C_Handle_t);
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f7ff fe5f 	bl	800119e <I2C_ClearADDRFlag>

	//6.	Send the data untill Len becomes =0
	//		before sending the data , first check the TXE flag ,whether the data buffer is empty or not

	while (Len >0)
 80014e0:	e014      	b.n	800150c <I2C_MasterSendData+0x80>
	{
		while ( ! I2C_Get_FlagStatus(pI2C_Handle_t->pI2Cx, I2C_FLAG_SR1_TXE));		//Wait Till TXE is SET
 80014e2:	bf00      	nop
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f8de 	bl	80016ac <I2C_Get_FlagStatus>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f6      	beq.n	80014e4 <I2C_MasterSendData+0x58>
		pI2C_Handle_t->pI2Cx->DR = *pTxbuffer;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	611a      	str	r2, [r3, #16]
		pTxbuffer ++;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	3301      	adds	r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
		Len--;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3b01      	subs	r3, #1
 800150a:	607b      	str	r3, [r7, #4]
	while (Len >0)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1e7      	bne.n	80014e2 <I2C_MasterSendData+0x56>

	//7.	When Len becomes 0, wait for TXE=1 and BTF =1 before Generating the STOP condition
	//		Note :  TXE=1 and BTF = 1, means the SR and DR registers are empty and next transmission should begin
	//		when  BTF = 1  SCL will be stretched (Pulled to LOW)

	while ( ! 	(  I2C_Get_FlagStatus(pI2C_Handle_t->pI2Cx, I2C_FLAG_SR1_TXE) ) );
 8001512:	bf00      	nop
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f8c6 	bl	80016ac <I2C_Get_FlagStatus>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f6      	beq.n	8001514 <I2C_MasterSendData+0x88>

	while ( !   ( I2C_Get_FlagStatus(pI2C_Handle_t->pI2Cx, I2C_FLAG_SR1_BTF) ) );
 8001526:	bf00      	nop
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2104      	movs	r1, #4
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f8bc 	bl	80016ac <I2C_Get_FlagStatus>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f6      	beq.n	8001528 <I2C_MasterSendData+0x9c>

	//8. 	Generate the STOP Condition and master need not to wait for the completion of STOP Condition
	//		Note: Generating STOP , will automatically clears the BTF

	if(Sr == I2C_DISABLE_SR)
 800153a:	7e3b      	ldrb	r3, [r7, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d104      	bne.n	800154a <I2C_MasterSendData+0xbe>
	{
	I2C_GenerateStopCondition(pI2C_Handle_t->pI2Cx);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fe61 	bl	800120c <I2C_GenerateStopCondition>





}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <I2C_MasterReceiverData>:
  *	@Note				- none

*/

void I2C_MasterReceiverData( I2C_Handle_t *pI2C_Handle, uint8_t *pRxBuffer, uint8_t len, uint8_t Slaveaddress,uint8_t Sr)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	4611      	mov	r1, r2
 800155e:	461a      	mov	r2, r3
 8001560:	460b      	mov	r3, r1
 8001562:	71fb      	strb	r3, [r7, #7]
 8001564:	4613      	mov	r3, r2
 8001566:	71bb      	strb	r3, [r7, #6]
	//1.	Generate Start Condition
	I2C_GenerateStartCondition(pI2C_Handle->pI2Cx);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fddd 	bl	800112c <I2C_GenerateStartCondition>

	//2.	Confirm the start Condition by checking the SB flag  in SR1 register
	//Note: 	Ultill the SB bit is cleared the SCL line will be Stretched Low(pulled to Low)
	while ( ! I2C_Get_FlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_SR1_SB));
 8001572:	bf00      	nop
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f896 	bl	80016ac <I2C_Get_FlagStatus>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f6      	beq.n	8001574 <I2C_MasterReceiverData+0x22>

	//3.	Send the Address of the slave in 7bit mode with Read information bit R=1. (Total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2C_Handle->pI2Cx, Slaveaddress);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	79ba      	ldrb	r2, [r7, #6]
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fdf0 	bl	8001174 <I2C_ExecuteAddressPhaseRead>

	//4. Wait Untill the Address phase is completed by checking the ADDR Flag in SR1 register

	while ( ! I2C_Get_FlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_SR1_ADDR));
 8001594:	bf00      	nop
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2102      	movs	r1, #2
 800159c:	4618      	mov	r0, r3
 800159e:	f000 f885 	bl	80016ac <I2C_Get_FlagStatus>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f6      	beq.n	8001596 <I2C_MasterReceiverData+0x44>

	/// Procedure to Read Only one Byte

	if (len ==1)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d121      	bne.n	80015f2 <I2C_MasterReceiverData+0xa0>
	{
		//Disable the ACK
		I2C_ManagaeAcking(pI2C_Handle->pI2Cx,I2C_ACK_DISABLE);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fe38 	bl	800122a <I2C_ManagaeAcking>

		//Clear the ADDR flag ,by reading SR1 followed by the SR2, check RM
		I2C_ClearADDRFlag(pI2C_Handle);
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f7ff fdef 	bl	800119e <I2C_ClearADDRFlag>


		//Wait untill the RxNE becomes 1
		while ( ! I2C_Get_FlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_SR1_RXNE));
 80015c0:	bf00      	nop
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2140      	movs	r1, #64	; 0x40
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f86f 	bl	80016ac <I2C_Get_FlagStatus>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f6      	beq.n	80015c2 <I2C_MasterReceiverData+0x70>

		//Generate Stop Condition
		if (Sr == I2C_DISABLE_SR)
 80015d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d104      	bne.n	80015e6 <I2C_MasterReceiverData+0x94>
		{
		I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fe13 	bl	800120c <I2C_GenerateStopCondition>
		}

		//Read Data into the buffer
		*pRxBuffer = pI2C_Handle->pI2Cx->DR;  			//for only 1 byte , no need for buffer++(increment)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	701a      	strb	r2, [r3, #0]


	}

	//	Procedure if the length is greater than one  (len >1)
	if( len >1)
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d930      	bls.n	800165a <I2C_MasterReceiverData+0x108>
	{
		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2C_Handle);
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f7ff fdd0 	bl	800119e <I2C_ClearADDRFlag>

		for ( uint32_t i= len; i >0  ; i --)
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e027      	b.n	8001654 <I2C_MasterReceiverData+0x102>
		{

			//Wait untill the RxNE becomes 1
			while (! I2C_Get_FlagStatus(pI2C_Handle->pI2Cx, I2C_FLAG_SR1_RXNE));
 8001604:	bf00      	nop
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2140      	movs	r1, #64	; 0x40
 800160c:	4618      	mov	r0, r3
 800160e:	f000 f84d 	bl	80016ac <I2C_Get_FlagStatus>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f6      	beq.n	8001606 <I2C_MasterReceiverData+0xb4>

			if ( i == 2)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d10e      	bne.n	800163c <I2C_MasterReceiverData+0xea>
			{
				//	Clear the Ack bit
				I2C_ManagaeAcking(pI2C_Handle->pI2Cx,I2C_ACK_DISABLE);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fe00 	bl	800122a <I2C_ManagaeAcking>

				//	Generate the Stop Bit
				if (Sr == I2C_DISABLE_SR)
 800162a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d104      	bne.n	800163c <I2C_MasterReceiverData+0xea>
				{
				I2C_GenerateStopCondition(pI2C_Handle->pI2Cx);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fde8 	bl	800120c <I2C_GenerateStopCondition>
				}

			}
			//Read the data from Data Register into the buffer
			*pRxBuffer = pI2C_Handle->pI2Cx->DR;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	701a      	strb	r2, [r3, #0]
			pRxBuffer++;
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3301      	adds	r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
		for ( uint32_t i= len; i >0  ; i --)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3b01      	subs	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1d4      	bne.n	8001604 <I2C_MasterReceiverData+0xb2>
		}

	}

	//Re-Enable the ACK
	if (pI2C_Handle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE) 		//if ack is enabled in structure ,then only enables the Ack in register
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	7a5b      	ldrb	r3, [r3, #9]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d105      	bne.n	800166e <I2C_MasterReceiverData+0x11c>
	{
	I2C_ManagaeAcking(pI2C_Handle->pI2Cx,I2C_ACK_ENABLE);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2101      	movs	r1, #1
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fdde 	bl	800122a <I2C_ManagaeAcking>
	}

}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <I2C_PeripheralControl>:
  *	@Note				- none

*/

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx , uint8_t EnorDi)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == ENABLE)
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d106      	bne.n	8001696 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->I2C_CR1 |= (1 << I2C_CR1_PE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8001694:	e005      	b.n	80016a2 <I2C_PeripheralControl+0x2c>
		pI2Cx->I2C_CR1 &= ~(1 << I2C_CR1_PE);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 0201 	bic.w	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	601a      	str	r2, [r3, #0]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <I2C_Get_FlagStatus>:
  *	@Note				- none

*/

uint8_t I2C_Get_FlagStatus(I2C_RegDef_t *pI2Cx, uint32_t Flag_Name)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
	if (pI2Cx->SR1 & Flag_Name)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695a      	ldr	r2, [r3, #20]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <I2C_Get_FlagStatus+0x1a>
	{
		return FLAG_SET;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <I2C_Get_FlagStatus+0x1c>
	}
	return FLAG_RESET;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <RCC_GetPLLOutputClk>:


//Creating a fucntion to get the value of PLL

uint32_t RCC_GetPLLOutputClk(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
	return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <RCC_GetPCLK1Value>:
//1. identify the clock source
//2. Identify the AHB prescalar value
//3. Identify the APB1 prescalar value

uint32_t RCC_GetPCLK1Value(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
	uint32_t pclk1;
	uint8_t clksrc, temp, ahbp,apb1p;
	uint32_t systemClk;

	//1. Identify the clock source
	clksrc = ((RCC->CFGR >> 2 ) & 0x3);
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <RCC_GetPCLK1Value+0xa0>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	71fb      	strb	r3, [r7, #7]

	if (clksrc ==0)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <RCC_GetPCLK1Value+0x20>
	{
		systemClk = 16000000;
 80016fa:	4b22      	ldr	r3, [pc, #136]	; (8001784 <RCC_GetPCLK1Value+0xa4>)
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	e00b      	b.n	8001718 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1 )
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d102      	bne.n	800170c <RCC_GetPCLK1Value+0x2c>
	{
		systemClk = 8000000;
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <RCC_GetPCLK1Value+0xa8>)
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	e005      	b.n	8001718 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 2 )
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d102      	bne.n	8001718 <RCC_GetPCLK1Value+0x38>
	{
		systemClk = RCC_GetPLLOutputClk();
 8001712:	f7ff ffde 	bl	80016d2 <RCC_GetPLLOutputClk>
 8001716:	60b8      	str	r0, [r7, #8]
	}

	//2.Identify the AHP Prescalar value
	//Read the value of HPRE in clock Configuration Register

	temp  = ((RCC->CFGR >> 4 ) & 0xF);
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <RCC_GetPCLK1Value+0xa0>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	71bb      	strb	r3, [r7, #6]

	if (temp < 8 )
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	2b07      	cmp	r3, #7
 800172a:	d802      	bhi.n	8001732 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	e005      	b.n	800173e <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_Prescalar[temp - 8 ]; // To get the first value from array
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	3b08      	subs	r3, #8
 8001736:	4a15      	ldr	r2, [pc, #84]	; (800178c <RCC_GetPCLK1Value+0xac>)
 8001738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800173c:	73fb      	strb	r3, [r7, #15]
	}

	//3. Identify the APB PreScaler

	temp = ((RCC->CFGR >> 10) & 0x7);
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <RCC_GetPCLK1Value+0xa0>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	0a9b      	lsrs	r3, r3, #10
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	71bb      	strb	r3, [r7, #6]
	if (temp <4)
 800174c:	79bb      	ldrb	r3, [r7, #6]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d802      	bhi.n	8001758 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8001752:	2301      	movs	r3, #1
 8001754:	73bb      	strb	r3, [r7, #14]
 8001756:	e005      	b.n	8001764 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1p = APB2_Prescalar[temp - 4];
 8001758:	79bb      	ldrb	r3, [r7, #6]
 800175a:	3b04      	subs	r3, #4
 800175c:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <RCC_GetPCLK1Value+0xb0>)
 800175e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001762:	73bb      	strb	r3, [r7, #14]
	}

	//Finally getting the PCLK1 -> verify in clock diagram
	pclk1 = (systemClk / ahbp) / apb1p;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	fbb2 f2f3 	udiv	r2, r2, r3
 800176c:	7bbb      	ldrb	r3, [r7, #14]
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	603b      	str	r3, [r7, #0]

	return pclk1;
 8001774:	683b      	ldr	r3, [r7, #0]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	00f42400 	.word	0x00f42400
 8001788:	007a1200 	.word	0x007a1200
 800178c:	20000000 	.word	0x20000000
 8001790:	20000014 	.word	0x20000014

08001794 <findslot>:
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <findslot+0x2c>)
 8001796:	b510      	push	{r4, lr}
 8001798:	4604      	mov	r4, r0
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	b118      	cbz	r0, 80017a6 <findslot+0x12>
 800179e:	6983      	ldr	r3, [r0, #24]
 80017a0:	b90b      	cbnz	r3, 80017a6 <findslot+0x12>
 80017a2:	f000 f98f 	bl	8001ac4 <__sinit>
 80017a6:	2c13      	cmp	r4, #19
 80017a8:	d807      	bhi.n	80017ba <findslot+0x26>
 80017aa:	4806      	ldr	r0, [pc, #24]	; (80017c4 <findslot+0x30>)
 80017ac:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 80017b0:	3301      	adds	r3, #1
 80017b2:	d002      	beq.n	80017ba <findslot+0x26>
 80017b4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80017b8:	bd10      	pop	{r4, pc}
 80017ba:	2000      	movs	r0, #0
 80017bc:	e7fc      	b.n	80017b8 <findslot+0x24>
 80017be:	bf00      	nop
 80017c0:	2000001c 	.word	0x2000001c
 80017c4:	200000b8 	.word	0x200000b8

080017c8 <checkerror>:
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ca:	1c43      	adds	r3, r0, #1
 80017cc:	4605      	mov	r5, r0
 80017ce:	d109      	bne.n	80017e4 <checkerror+0x1c>
 80017d0:	f000 f932 	bl	8001a38 <__errno>
 80017d4:	2413      	movs	r4, #19
 80017d6:	4606      	mov	r6, r0
 80017d8:	2700      	movs	r7, #0
 80017da:	4620      	mov	r0, r4
 80017dc:	4639      	mov	r1, r7
 80017de:	beab      	bkpt	0x00ab
 80017e0:	4604      	mov	r4, r0
 80017e2:	6034      	str	r4, [r6, #0]
 80017e4:	4628      	mov	r0, r5
 80017e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080017e8 <error>:
 80017e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ea:	4605      	mov	r5, r0
 80017ec:	f000 f924 	bl	8001a38 <__errno>
 80017f0:	2413      	movs	r4, #19
 80017f2:	4606      	mov	r6, r0
 80017f4:	2700      	movs	r7, #0
 80017f6:	4620      	mov	r0, r4
 80017f8:	4639      	mov	r1, r7
 80017fa:	beab      	bkpt	0x00ab
 80017fc:	4604      	mov	r4, r0
 80017fe:	6034      	str	r4, [r6, #0]
 8001800:	4628      	mov	r0, r5
 8001802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001804 <_swiread>:
 8001804:	b530      	push	{r4, r5, lr}
 8001806:	b085      	sub	sp, #20
 8001808:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800180c:	9203      	str	r2, [sp, #12]
 800180e:	2406      	movs	r4, #6
 8001810:	ad01      	add	r5, sp, #4
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	beab      	bkpt	0x00ab
 8001818:	4604      	mov	r4, r0
 800181a:	4620      	mov	r0, r4
 800181c:	f7ff ffd4 	bl	80017c8 <checkerror>
 8001820:	b005      	add	sp, #20
 8001822:	bd30      	pop	{r4, r5, pc}

08001824 <_read>:
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	460e      	mov	r6, r1
 8001828:	4615      	mov	r5, r2
 800182a:	f7ff ffb3 	bl	8001794 <findslot>
 800182e:	4604      	mov	r4, r0
 8001830:	b930      	cbnz	r0, 8001840 <_read+0x1c>
 8001832:	f000 f901 	bl	8001a38 <__errno>
 8001836:	2309      	movs	r3, #9
 8001838:	6003      	str	r3, [r0, #0]
 800183a:	f04f 30ff 	mov.w	r0, #4294967295
 800183e:	bd70      	pop	{r4, r5, r6, pc}
 8001840:	462a      	mov	r2, r5
 8001842:	4631      	mov	r1, r6
 8001844:	6800      	ldr	r0, [r0, #0]
 8001846:	f7ff ffdd 	bl	8001804 <_swiread>
 800184a:	1c43      	adds	r3, r0, #1
 800184c:	bf1f      	itttt	ne
 800184e:	6863      	ldrne	r3, [r4, #4]
 8001850:	1a28      	subne	r0, r5, r0
 8001852:	181b      	addne	r3, r3, r0
 8001854:	6063      	strne	r3, [r4, #4]
 8001856:	e7f2      	b.n	800183e <_read+0x1a>

08001858 <_swilseek>:
 8001858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800185a:	460c      	mov	r4, r1
 800185c:	4616      	mov	r6, r2
 800185e:	f7ff ff99 	bl	8001794 <findslot>
 8001862:	4605      	mov	r5, r0
 8001864:	b940      	cbnz	r0, 8001878 <_swilseek+0x20>
 8001866:	f000 f8e7 	bl	8001a38 <__errno>
 800186a:	2309      	movs	r3, #9
 800186c:	6003      	str	r3, [r0, #0]
 800186e:	f04f 34ff 	mov.w	r4, #4294967295
 8001872:	4620      	mov	r0, r4
 8001874:	b003      	add	sp, #12
 8001876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001878:	2e02      	cmp	r6, #2
 800187a:	d903      	bls.n	8001884 <_swilseek+0x2c>
 800187c:	f000 f8dc 	bl	8001a38 <__errno>
 8001880:	2316      	movs	r3, #22
 8001882:	e7f3      	b.n	800186c <_swilseek+0x14>
 8001884:	2e01      	cmp	r6, #1
 8001886:	d112      	bne.n	80018ae <_swilseek+0x56>
 8001888:	6843      	ldr	r3, [r0, #4]
 800188a:	18e4      	adds	r4, r4, r3
 800188c:	d4f6      	bmi.n	800187c <_swilseek+0x24>
 800188e:	682b      	ldr	r3, [r5, #0]
 8001890:	260a      	movs	r6, #10
 8001892:	e9cd 3400 	strd	r3, r4, [sp]
 8001896:	466f      	mov	r7, sp
 8001898:	4630      	mov	r0, r6
 800189a:	4639      	mov	r1, r7
 800189c:	beab      	bkpt	0x00ab
 800189e:	4606      	mov	r6, r0
 80018a0:	4630      	mov	r0, r6
 80018a2:	f7ff ff91 	bl	80017c8 <checkerror>
 80018a6:	2800      	cmp	r0, #0
 80018a8:	dbe1      	blt.n	800186e <_swilseek+0x16>
 80018aa:	606c      	str	r4, [r5, #4]
 80018ac:	e7e1      	b.n	8001872 <_swilseek+0x1a>
 80018ae:	2e02      	cmp	r6, #2
 80018b0:	d1ed      	bne.n	800188e <_swilseek+0x36>
 80018b2:	af02      	add	r7, sp, #8
 80018b4:	6803      	ldr	r3, [r0, #0]
 80018b6:	f847 3d08 	str.w	r3, [r7, #-8]!
 80018ba:	260c      	movs	r6, #12
 80018bc:	4630      	mov	r0, r6
 80018be:	4639      	mov	r1, r7
 80018c0:	beab      	bkpt	0x00ab
 80018c2:	4606      	mov	r6, r0
 80018c4:	4630      	mov	r0, r6
 80018c6:	f7ff ff7f 	bl	80017c8 <checkerror>
 80018ca:	1c43      	adds	r3, r0, #1
 80018cc:	d0cf      	beq.n	800186e <_swilseek+0x16>
 80018ce:	4404      	add	r4, r0
 80018d0:	e7dd      	b.n	800188e <_swilseek+0x36>

080018d2 <_lseek>:
 80018d2:	f7ff bfc1 	b.w	8001858 <_swilseek>

080018d6 <_swiwrite>:
 80018d6:	b530      	push	{r4, r5, lr}
 80018d8:	b085      	sub	sp, #20
 80018da:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80018de:	9203      	str	r2, [sp, #12]
 80018e0:	2405      	movs	r4, #5
 80018e2:	ad01      	add	r5, sp, #4
 80018e4:	4620      	mov	r0, r4
 80018e6:	4629      	mov	r1, r5
 80018e8:	beab      	bkpt	0x00ab
 80018ea:	4604      	mov	r4, r0
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff ff6b 	bl	80017c8 <checkerror>
 80018f2:	b005      	add	sp, #20
 80018f4:	bd30      	pop	{r4, r5, pc}

080018f6 <_write>:
 80018f6:	b570      	push	{r4, r5, r6, lr}
 80018f8:	460e      	mov	r6, r1
 80018fa:	4615      	mov	r5, r2
 80018fc:	f7ff ff4a 	bl	8001794 <findslot>
 8001900:	4604      	mov	r4, r0
 8001902:	b930      	cbnz	r0, 8001912 <_write+0x1c>
 8001904:	f000 f898 	bl	8001a38 <__errno>
 8001908:	2309      	movs	r3, #9
 800190a:	6003      	str	r3, [r0, #0]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	bd70      	pop	{r4, r5, r6, pc}
 8001912:	462a      	mov	r2, r5
 8001914:	4631      	mov	r1, r6
 8001916:	6800      	ldr	r0, [r0, #0]
 8001918:	f7ff ffdd 	bl	80018d6 <_swiwrite>
 800191c:	1e02      	subs	r2, r0, #0
 800191e:	dbf5      	blt.n	800190c <_write+0x16>
 8001920:	6863      	ldr	r3, [r4, #4]
 8001922:	1aa8      	subs	r0, r5, r2
 8001924:	4403      	add	r3, r0
 8001926:	42aa      	cmp	r2, r5
 8001928:	6063      	str	r3, [r4, #4]
 800192a:	d1f1      	bne.n	8001910 <_write+0x1a>
 800192c:	2000      	movs	r0, #0
 800192e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001932:	f7ff bf59 	b.w	80017e8 <error>

08001936 <_swiclose>:
 8001936:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001938:	ad02      	add	r5, sp, #8
 800193a:	2402      	movs	r4, #2
 800193c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	beab      	bkpt	0x00ab
 8001946:	4604      	mov	r4, r0
 8001948:	4620      	mov	r0, r4
 800194a:	f7ff ff3d 	bl	80017c8 <checkerror>
 800194e:	b003      	add	sp, #12
 8001950:	bd30      	pop	{r4, r5, pc}
	...

08001954 <_close>:
 8001954:	b538      	push	{r3, r4, r5, lr}
 8001956:	4605      	mov	r5, r0
 8001958:	f7ff ff1c 	bl	8001794 <findslot>
 800195c:	4604      	mov	r4, r0
 800195e:	b930      	cbnz	r0, 800196e <_close+0x1a>
 8001960:	f000 f86a 	bl	8001a38 <__errno>
 8001964:	2309      	movs	r3, #9
 8001966:	6003      	str	r3, [r0, #0]
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	bd38      	pop	{r3, r4, r5, pc}
 800196e:	3d01      	subs	r5, #1
 8001970:	2d01      	cmp	r5, #1
 8001972:	d809      	bhi.n	8001988 <_close+0x34>
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <_close+0x48>)
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	429a      	cmp	r2, r3
 800197c:	d104      	bne.n	8001988 <_close+0x34>
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	6003      	str	r3, [r0, #0]
 8001984:	2000      	movs	r0, #0
 8001986:	e7f1      	b.n	800196c <_close+0x18>
 8001988:	6820      	ldr	r0, [r4, #0]
 800198a:	f7ff ffd4 	bl	8001936 <_swiclose>
 800198e:	2800      	cmp	r0, #0
 8001990:	d1ec      	bne.n	800196c <_close+0x18>
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	6023      	str	r3, [r4, #0]
 8001998:	e7e8      	b.n	800196c <_close+0x18>
 800199a:	bf00      	nop
 800199c:	200000b8 	.word	0x200000b8

080019a0 <_swistat>:
 80019a0:	b570      	push	{r4, r5, r6, lr}
 80019a2:	460c      	mov	r4, r1
 80019a4:	f7ff fef6 	bl	8001794 <findslot>
 80019a8:	4606      	mov	r6, r0
 80019aa:	b930      	cbnz	r0, 80019ba <_swistat+0x1a>
 80019ac:	f000 f844 	bl	8001a38 <__errno>
 80019b0:	2309      	movs	r3, #9
 80019b2:	6003      	str	r3, [r0, #0]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	bd70      	pop	{r4, r5, r6, pc}
 80019ba:	6863      	ldr	r3, [r4, #4]
 80019bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019c0:	6063      	str	r3, [r4, #4]
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	6463      	str	r3, [r4, #68]	; 0x44
 80019c8:	250c      	movs	r5, #12
 80019ca:	4628      	mov	r0, r5
 80019cc:	4631      	mov	r1, r6
 80019ce:	beab      	bkpt	0x00ab
 80019d0:	4605      	mov	r5, r0
 80019d2:	4628      	mov	r0, r5
 80019d4:	f7ff fef8 	bl	80017c8 <checkerror>
 80019d8:	1c43      	adds	r3, r0, #1
 80019da:	bf1c      	itt	ne
 80019dc:	6120      	strne	r0, [r4, #16]
 80019de:	2000      	movne	r0, #0
 80019e0:	e7ea      	b.n	80019b8 <_swistat+0x18>

080019e2 <_fstat>:
 80019e2:	460b      	mov	r3, r1
 80019e4:	b510      	push	{r4, lr}
 80019e6:	2100      	movs	r1, #0
 80019e8:	4604      	mov	r4, r0
 80019ea:	2258      	movs	r2, #88	; 0x58
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f917 	bl	8001c20 <memset>
 80019f2:	4601      	mov	r1, r0
 80019f4:	4620      	mov	r0, r4
 80019f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019fa:	f7ff bfd1 	b.w	80019a0 <_swistat>

080019fe <_isatty>:
 80019fe:	b570      	push	{r4, r5, r6, lr}
 8001a00:	f7ff fec8 	bl	8001794 <findslot>
 8001a04:	2509      	movs	r5, #9
 8001a06:	4604      	mov	r4, r0
 8001a08:	b920      	cbnz	r0, 8001a14 <_isatty+0x16>
 8001a0a:	f000 f815 	bl	8001a38 <__errno>
 8001a0e:	6005      	str	r5, [r0, #0]
 8001a10:	4620      	mov	r0, r4
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	4628      	mov	r0, r5
 8001a16:	4621      	mov	r1, r4
 8001a18:	beab      	bkpt	0x00ab
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	2c01      	cmp	r4, #1
 8001a1e:	d0f7      	beq.n	8001a10 <_isatty+0x12>
 8001a20:	f000 f80a 	bl	8001a38 <__errno>
 8001a24:	2400      	movs	r4, #0
 8001a26:	4606      	mov	r6, r0
 8001a28:	2513      	movs	r5, #19
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	beab      	bkpt	0x00ab
 8001a30:	4605      	mov	r5, r0
 8001a32:	6035      	str	r5, [r6, #0]
 8001a34:	e7ec      	b.n	8001a10 <_isatty+0x12>
	...

08001a38 <__errno>:
 8001a38:	4b01      	ldr	r3, [pc, #4]	; (8001a40 <__errno+0x8>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	2000001c 	.word	0x2000001c

08001a44 <std>:
 8001a44:	2300      	movs	r3, #0
 8001a46:	b510      	push	{r4, lr}
 8001a48:	4604      	mov	r4, r0
 8001a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8001a4e:	6083      	str	r3, [r0, #8]
 8001a50:	8181      	strh	r1, [r0, #12]
 8001a52:	6643      	str	r3, [r0, #100]	; 0x64
 8001a54:	81c2      	strh	r2, [r0, #14]
 8001a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a5a:	6183      	str	r3, [r0, #24]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	2208      	movs	r2, #8
 8001a60:	305c      	adds	r0, #92	; 0x5c
 8001a62:	f000 f8dd 	bl	8001c20 <memset>
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <std+0x38>)
 8001a68:	6263      	str	r3, [r4, #36]	; 0x24
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <std+0x3c>)
 8001a6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <std+0x40>)
 8001a70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <std+0x44>)
 8001a74:	6224      	str	r4, [r4, #32]
 8001a76:	6323      	str	r3, [r4, #48]	; 0x30
 8001a78:	bd10      	pop	{r4, pc}
 8001a7a:	bf00      	nop
 8001a7c:	08001d35 	.word	0x08001d35
 8001a80:	08001d57 	.word	0x08001d57
 8001a84:	08001d8f 	.word	0x08001d8f
 8001a88:	08001db3 	.word	0x08001db3

08001a8c <_cleanup_r>:
 8001a8c:	4901      	ldr	r1, [pc, #4]	; (8001a94 <_cleanup_r+0x8>)
 8001a8e:	f000 b885 	b.w	8001b9c <_fwalk_reent>
 8001a92:	bf00      	nop
 8001a94:	08001f0d 	.word	0x08001f0d

08001a98 <__sfmoreglue>:
 8001a98:	b570      	push	{r4, r5, r6, lr}
 8001a9a:	1e4a      	subs	r2, r1, #1
 8001a9c:	2568      	movs	r5, #104	; 0x68
 8001a9e:	4355      	muls	r5, r2
 8001aa0:	460e      	mov	r6, r1
 8001aa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001aa6:	f000 f8c3 	bl	8001c30 <_malloc_r>
 8001aaa:	4604      	mov	r4, r0
 8001aac:	b140      	cbz	r0, 8001ac0 <__sfmoreglue+0x28>
 8001aae:	2100      	movs	r1, #0
 8001ab0:	e9c0 1600 	strd	r1, r6, [r0]
 8001ab4:	300c      	adds	r0, #12
 8001ab6:	60a0      	str	r0, [r4, #8]
 8001ab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001abc:	f000 f8b0 	bl	8001c20 <memset>
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	bd70      	pop	{r4, r5, r6, pc}

08001ac4 <__sinit>:
 8001ac4:	6983      	ldr	r3, [r0, #24]
 8001ac6:	b510      	push	{r4, lr}
 8001ac8:	4604      	mov	r4, r0
 8001aca:	bb33      	cbnz	r3, 8001b1a <__sinit+0x56>
 8001acc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001ad0:	6503      	str	r3, [r0, #80]	; 0x50
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <__sinit+0x58>)
 8001ad4:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <__sinit+0x5c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6282      	str	r2, [r0, #40]	; 0x28
 8001ada:	4298      	cmp	r0, r3
 8001adc:	bf04      	itt	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	6183      	streq	r3, [r0, #24]
 8001ae2:	f000 f81f 	bl	8001b24 <__sfp>
 8001ae6:	6060      	str	r0, [r4, #4]
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f000 f81b 	bl	8001b24 <__sfp>
 8001aee:	60a0      	str	r0, [r4, #8]
 8001af0:	4620      	mov	r0, r4
 8001af2:	f000 f817 	bl	8001b24 <__sfp>
 8001af6:	2200      	movs	r2, #0
 8001af8:	60e0      	str	r0, [r4, #12]
 8001afa:	2104      	movs	r1, #4
 8001afc:	6860      	ldr	r0, [r4, #4]
 8001afe:	f7ff ffa1 	bl	8001a44 <std>
 8001b02:	2201      	movs	r2, #1
 8001b04:	2109      	movs	r1, #9
 8001b06:	68a0      	ldr	r0, [r4, #8]
 8001b08:	f7ff ff9c 	bl	8001a44 <std>
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	2112      	movs	r1, #18
 8001b10:	68e0      	ldr	r0, [r4, #12]
 8001b12:	f7ff ff97 	bl	8001a44 <std>
 8001b16:	2301      	movs	r3, #1
 8001b18:	61a3      	str	r3, [r4, #24]
 8001b1a:	bd10      	pop	{r4, pc}
 8001b1c:	08002934 	.word	0x08002934
 8001b20:	08001a8d 	.word	0x08001a8d

08001b24 <__sfp>:
 8001b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b26:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <__sfp+0x70>)
 8001b28:	681e      	ldr	r6, [r3, #0]
 8001b2a:	69b3      	ldr	r3, [r6, #24]
 8001b2c:	4607      	mov	r7, r0
 8001b2e:	b913      	cbnz	r3, 8001b36 <__sfp+0x12>
 8001b30:	4630      	mov	r0, r6
 8001b32:	f7ff ffc7 	bl	8001ac4 <__sinit>
 8001b36:	3648      	adds	r6, #72	; 0x48
 8001b38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	d503      	bpl.n	8001b48 <__sfp+0x24>
 8001b40:	6833      	ldr	r3, [r6, #0]
 8001b42:	b133      	cbz	r3, 8001b52 <__sfp+0x2e>
 8001b44:	6836      	ldr	r6, [r6, #0]
 8001b46:	e7f7      	b.n	8001b38 <__sfp+0x14>
 8001b48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001b4c:	b16d      	cbz	r5, 8001b6a <__sfp+0x46>
 8001b4e:	3468      	adds	r4, #104	; 0x68
 8001b50:	e7f4      	b.n	8001b3c <__sfp+0x18>
 8001b52:	2104      	movs	r1, #4
 8001b54:	4638      	mov	r0, r7
 8001b56:	f7ff ff9f 	bl	8001a98 <__sfmoreglue>
 8001b5a:	6030      	str	r0, [r6, #0]
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d1f1      	bne.n	8001b44 <__sfp+0x20>
 8001b60:	230c      	movs	r3, #12
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	4604      	mov	r4, r0
 8001b66:	4620      	mov	r0, r4
 8001b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <__sfp+0x74>)
 8001b6c:	6665      	str	r5, [r4, #100]	; 0x64
 8001b6e:	e9c4 5500 	strd	r5, r5, [r4]
 8001b72:	60a5      	str	r5, [r4, #8]
 8001b74:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001b78:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	4629      	mov	r1, r5
 8001b80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001b84:	f000 f84c 	bl	8001c20 <memset>
 8001b88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001b8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001b90:	e7e9      	b.n	8001b66 <__sfp+0x42>
 8001b92:	bf00      	nop
 8001b94:	08002934 	.word	0x08002934
 8001b98:	ffff0001 	.word	0xffff0001

08001b9c <_fwalk_reent>:
 8001b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ba0:	4680      	mov	r8, r0
 8001ba2:	4689      	mov	r9, r1
 8001ba4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ba8:	2600      	movs	r6, #0
 8001baa:	b914      	cbnz	r4, 8001bb2 <_fwalk_reent+0x16>
 8001bac:	4630      	mov	r0, r6
 8001bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bb2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001bb6:	3f01      	subs	r7, #1
 8001bb8:	d501      	bpl.n	8001bbe <_fwalk_reent+0x22>
 8001bba:	6824      	ldr	r4, [r4, #0]
 8001bbc:	e7f5      	b.n	8001baa <_fwalk_reent+0xe>
 8001bbe:	89ab      	ldrh	r3, [r5, #12]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d907      	bls.n	8001bd4 <_fwalk_reent+0x38>
 8001bc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	d003      	beq.n	8001bd4 <_fwalk_reent+0x38>
 8001bcc:	4629      	mov	r1, r5
 8001bce:	4640      	mov	r0, r8
 8001bd0:	47c8      	blx	r9
 8001bd2:	4306      	orrs	r6, r0
 8001bd4:	3568      	adds	r5, #104	; 0x68
 8001bd6:	e7ee      	b.n	8001bb6 <_fwalk_reent+0x1a>

08001bd8 <__libc_init_array>:
 8001bd8:	b570      	push	{r4, r5, r6, lr}
 8001bda:	4e0d      	ldr	r6, [pc, #52]	; (8001c10 <__libc_init_array+0x38>)
 8001bdc:	4c0d      	ldr	r4, [pc, #52]	; (8001c14 <__libc_init_array+0x3c>)
 8001bde:	1ba4      	subs	r4, r4, r6
 8001be0:	10a4      	asrs	r4, r4, #2
 8001be2:	2500      	movs	r5, #0
 8001be4:	42a5      	cmp	r5, r4
 8001be6:	d109      	bne.n	8001bfc <__libc_init_array+0x24>
 8001be8:	4e0b      	ldr	r6, [pc, #44]	; (8001c18 <__libc_init_array+0x40>)
 8001bea:	4c0c      	ldr	r4, [pc, #48]	; (8001c1c <__libc_init_array+0x44>)
 8001bec:	f000 fe38 	bl	8002860 <_init>
 8001bf0:	1ba4      	subs	r4, r4, r6
 8001bf2:	10a4      	asrs	r4, r4, #2
 8001bf4:	2500      	movs	r5, #0
 8001bf6:	42a5      	cmp	r5, r4
 8001bf8:	d105      	bne.n	8001c06 <__libc_init_array+0x2e>
 8001bfa:	bd70      	pop	{r4, r5, r6, pc}
 8001bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c00:	4798      	blx	r3
 8001c02:	3501      	adds	r5, #1
 8001c04:	e7ee      	b.n	8001be4 <__libc_init_array+0xc>
 8001c06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c0a:	4798      	blx	r3
 8001c0c:	3501      	adds	r5, #1
 8001c0e:	e7f2      	b.n	8001bf6 <__libc_init_array+0x1e>
 8001c10:	0800296c 	.word	0x0800296c
 8001c14:	0800296c 	.word	0x0800296c
 8001c18:	0800296c 	.word	0x0800296c
 8001c1c:	08002970 	.word	0x08002970

08001c20 <memset>:
 8001c20:	4402      	add	r2, r0
 8001c22:	4603      	mov	r3, r0
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d100      	bne.n	8001c2a <memset+0xa>
 8001c28:	4770      	bx	lr
 8001c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8001c2e:	e7f9      	b.n	8001c24 <memset+0x4>

08001c30 <_malloc_r>:
 8001c30:	b570      	push	{r4, r5, r6, lr}
 8001c32:	1ccd      	adds	r5, r1, #3
 8001c34:	f025 0503 	bic.w	r5, r5, #3
 8001c38:	3508      	adds	r5, #8
 8001c3a:	2d0c      	cmp	r5, #12
 8001c3c:	bf38      	it	cc
 8001c3e:	250c      	movcc	r5, #12
 8001c40:	2d00      	cmp	r5, #0
 8001c42:	4606      	mov	r6, r0
 8001c44:	db01      	blt.n	8001c4a <_malloc_r+0x1a>
 8001c46:	42a9      	cmp	r1, r5
 8001c48:	d903      	bls.n	8001c52 <_malloc_r+0x22>
 8001c4a:	230c      	movs	r3, #12
 8001c4c:	6033      	str	r3, [r6, #0]
 8001c4e:	2000      	movs	r0, #0
 8001c50:	bd70      	pop	{r4, r5, r6, pc}
 8001c52:	f000 f997 	bl	8001f84 <__malloc_lock>
 8001c56:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <_malloc_r+0xac>)
 8001c58:	6814      	ldr	r4, [r2, #0]
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	b991      	cbnz	r1, 8001c84 <_malloc_r+0x54>
 8001c5e:	4c20      	ldr	r4, [pc, #128]	; (8001ce0 <_malloc_r+0xb0>)
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	b91b      	cbnz	r3, 8001c6c <_malloc_r+0x3c>
 8001c64:	4630      	mov	r0, r6
 8001c66:	f000 f855 	bl	8001d14 <_sbrk_r>
 8001c6a:	6020      	str	r0, [r4, #0]
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f000 f850 	bl	8001d14 <_sbrk_r>
 8001c74:	1c43      	adds	r3, r0, #1
 8001c76:	d124      	bne.n	8001cc2 <_malloc_r+0x92>
 8001c78:	230c      	movs	r3, #12
 8001c7a:	6033      	str	r3, [r6, #0]
 8001c7c:	4630      	mov	r0, r6
 8001c7e:	f000 f982 	bl	8001f86 <__malloc_unlock>
 8001c82:	e7e4      	b.n	8001c4e <_malloc_r+0x1e>
 8001c84:	680b      	ldr	r3, [r1, #0]
 8001c86:	1b5b      	subs	r3, r3, r5
 8001c88:	d418      	bmi.n	8001cbc <_malloc_r+0x8c>
 8001c8a:	2b0b      	cmp	r3, #11
 8001c8c:	d90f      	bls.n	8001cae <_malloc_r+0x7e>
 8001c8e:	600b      	str	r3, [r1, #0]
 8001c90:	50cd      	str	r5, [r1, r3]
 8001c92:	18cc      	adds	r4, r1, r3
 8001c94:	4630      	mov	r0, r6
 8001c96:	f000 f976 	bl	8001f86 <__malloc_unlock>
 8001c9a:	f104 000b 	add.w	r0, r4, #11
 8001c9e:	1d23      	adds	r3, r4, #4
 8001ca0:	f020 0007 	bic.w	r0, r0, #7
 8001ca4:	1ac3      	subs	r3, r0, r3
 8001ca6:	d0d3      	beq.n	8001c50 <_malloc_r+0x20>
 8001ca8:	425a      	negs	r2, r3
 8001caa:	50e2      	str	r2, [r4, r3]
 8001cac:	e7d0      	b.n	8001c50 <_malloc_r+0x20>
 8001cae:	428c      	cmp	r4, r1
 8001cb0:	684b      	ldr	r3, [r1, #4]
 8001cb2:	bf16      	itet	ne
 8001cb4:	6063      	strne	r3, [r4, #4]
 8001cb6:	6013      	streq	r3, [r2, #0]
 8001cb8:	460c      	movne	r4, r1
 8001cba:	e7eb      	b.n	8001c94 <_malloc_r+0x64>
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	6849      	ldr	r1, [r1, #4]
 8001cc0:	e7cc      	b.n	8001c5c <_malloc_r+0x2c>
 8001cc2:	1cc4      	adds	r4, r0, #3
 8001cc4:	f024 0403 	bic.w	r4, r4, #3
 8001cc8:	42a0      	cmp	r0, r4
 8001cca:	d005      	beq.n	8001cd8 <_malloc_r+0xa8>
 8001ccc:	1a21      	subs	r1, r4, r0
 8001cce:	4630      	mov	r0, r6
 8001cd0:	f000 f820 	bl	8001d14 <_sbrk_r>
 8001cd4:	3001      	adds	r0, #1
 8001cd6:	d0cf      	beq.n	8001c78 <_malloc_r+0x48>
 8001cd8:	6025      	str	r5, [r4, #0]
 8001cda:	e7db      	b.n	8001c94 <_malloc_r+0x64>
 8001cdc:	20000158 	.word	0x20000158
 8001ce0:	2000015c 	.word	0x2000015c

08001ce4 <iprintf>:
 8001ce4:	b40f      	push	{r0, r1, r2, r3}
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <iprintf+0x2c>)
 8001ce8:	b513      	push	{r0, r1, r4, lr}
 8001cea:	681c      	ldr	r4, [r3, #0]
 8001cec:	b124      	cbz	r4, 8001cf8 <iprintf+0x14>
 8001cee:	69a3      	ldr	r3, [r4, #24]
 8001cf0:	b913      	cbnz	r3, 8001cf8 <iprintf+0x14>
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f7ff fee6 	bl	8001ac4 <__sinit>
 8001cf8:	ab05      	add	r3, sp, #20
 8001cfa:	9a04      	ldr	r2, [sp, #16]
 8001cfc:	68a1      	ldr	r1, [r4, #8]
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	4620      	mov	r0, r4
 8001d02:	f000 f9b7 	bl	8002074 <_vfiprintf_r>
 8001d06:	b002      	add	sp, #8
 8001d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d0c:	b004      	add	sp, #16
 8001d0e:	4770      	bx	lr
 8001d10:	2000001c 	.word	0x2000001c

08001d14 <_sbrk_r>:
 8001d14:	b538      	push	{r3, r4, r5, lr}
 8001d16:	4c06      	ldr	r4, [pc, #24]	; (8001d30 <_sbrk_r+0x1c>)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	4605      	mov	r5, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	6023      	str	r3, [r4, #0]
 8001d20:	f7fe ff26 	bl	8000b70 <_sbrk>
 8001d24:	1c43      	adds	r3, r0, #1
 8001d26:	d102      	bne.n	8001d2e <_sbrk_r+0x1a>
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	b103      	cbz	r3, 8001d2e <_sbrk_r+0x1a>
 8001d2c:	602b      	str	r3, [r5, #0]
 8001d2e:	bd38      	pop	{r3, r4, r5, pc}
 8001d30:	2000017c 	.word	0x2000017c

08001d34 <__sread>:
 8001d34:	b510      	push	{r4, lr}
 8001d36:	460c      	mov	r4, r1
 8001d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d3c:	f000 fc38 	bl	80025b0 <_read_r>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	bfab      	itete	ge
 8001d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001d46:	89a3      	ldrhlt	r3, [r4, #12]
 8001d48:	181b      	addge	r3, r3, r0
 8001d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001d4e:	bfac      	ite	ge
 8001d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8001d52:	81a3      	strhlt	r3, [r4, #12]
 8001d54:	bd10      	pop	{r4, pc}

08001d56 <__swrite>:
 8001d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d5a:	461f      	mov	r7, r3
 8001d5c:	898b      	ldrh	r3, [r1, #12]
 8001d5e:	05db      	lsls	r3, r3, #23
 8001d60:	4605      	mov	r5, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	4616      	mov	r6, r2
 8001d66:	d505      	bpl.n	8001d74 <__swrite+0x1e>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d70:	f000 f8f6 	bl	8001f60 <_lseek_r>
 8001d74:	89a3      	ldrh	r3, [r4, #12]
 8001d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d7e:	81a3      	strh	r3, [r4, #12]
 8001d80:	4632      	mov	r2, r6
 8001d82:	463b      	mov	r3, r7
 8001d84:	4628      	mov	r0, r5
 8001d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d8a:	f000 b817 	b.w	8001dbc <_write_r>

08001d8e <__sseek>:
 8001d8e:	b510      	push	{r4, lr}
 8001d90:	460c      	mov	r4, r1
 8001d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d96:	f000 f8e3 	bl	8001f60 <_lseek_r>
 8001d9a:	1c43      	adds	r3, r0, #1
 8001d9c:	89a3      	ldrh	r3, [r4, #12]
 8001d9e:	bf15      	itete	ne
 8001da0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001daa:	81a3      	strheq	r3, [r4, #12]
 8001dac:	bf18      	it	ne
 8001dae:	81a3      	strhne	r3, [r4, #12]
 8001db0:	bd10      	pop	{r4, pc}

08001db2 <__sclose>:
 8001db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001db6:	f000 b813 	b.w	8001de0 <_close_r>
	...

08001dbc <_write_r>:
 8001dbc:	b538      	push	{r3, r4, r5, lr}
 8001dbe:	4c07      	ldr	r4, [pc, #28]	; (8001ddc <_write_r+0x20>)
 8001dc0:	4605      	mov	r5, r0
 8001dc2:	4608      	mov	r0, r1
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	6022      	str	r2, [r4, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f7ff fd93 	bl	80018f6 <_write>
 8001dd0:	1c43      	adds	r3, r0, #1
 8001dd2:	d102      	bne.n	8001dda <_write_r+0x1e>
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	b103      	cbz	r3, 8001dda <_write_r+0x1e>
 8001dd8:	602b      	str	r3, [r5, #0]
 8001dda:	bd38      	pop	{r3, r4, r5, pc}
 8001ddc:	2000017c 	.word	0x2000017c

08001de0 <_close_r>:
 8001de0:	b538      	push	{r3, r4, r5, lr}
 8001de2:	4c06      	ldr	r4, [pc, #24]	; (8001dfc <_close_r+0x1c>)
 8001de4:	2300      	movs	r3, #0
 8001de6:	4605      	mov	r5, r0
 8001de8:	4608      	mov	r0, r1
 8001dea:	6023      	str	r3, [r4, #0]
 8001dec:	f7ff fdb2 	bl	8001954 <_close>
 8001df0:	1c43      	adds	r3, r0, #1
 8001df2:	d102      	bne.n	8001dfa <_close_r+0x1a>
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	b103      	cbz	r3, 8001dfa <_close_r+0x1a>
 8001df8:	602b      	str	r3, [r5, #0]
 8001dfa:	bd38      	pop	{r3, r4, r5, pc}
 8001dfc:	2000017c 	.word	0x2000017c

08001e00 <__sflush_r>:
 8001e00:	898a      	ldrh	r2, [r1, #12]
 8001e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e06:	4605      	mov	r5, r0
 8001e08:	0710      	lsls	r0, r2, #28
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	d458      	bmi.n	8001ec0 <__sflush_r+0xc0>
 8001e0e:	684b      	ldr	r3, [r1, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	dc05      	bgt.n	8001e20 <__sflush_r+0x20>
 8001e14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	dc02      	bgt.n	8001e20 <__sflush_r+0x20>
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e22:	2e00      	cmp	r6, #0
 8001e24:	d0f9      	beq.n	8001e1a <__sflush_r+0x1a>
 8001e26:	2300      	movs	r3, #0
 8001e28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e2c:	682f      	ldr	r7, [r5, #0]
 8001e2e:	6a21      	ldr	r1, [r4, #32]
 8001e30:	602b      	str	r3, [r5, #0]
 8001e32:	d032      	beq.n	8001e9a <__sflush_r+0x9a>
 8001e34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e36:	89a3      	ldrh	r3, [r4, #12]
 8001e38:	075a      	lsls	r2, r3, #29
 8001e3a:	d505      	bpl.n	8001e48 <__sflush_r+0x48>
 8001e3c:	6863      	ldr	r3, [r4, #4]
 8001e3e:	1ac0      	subs	r0, r0, r3
 8001e40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e42:	b10b      	cbz	r3, 8001e48 <__sflush_r+0x48>
 8001e44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e46:	1ac0      	subs	r0, r0, r3
 8001e48:	2300      	movs	r3, #0
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e4e:	6a21      	ldr	r1, [r4, #32]
 8001e50:	4628      	mov	r0, r5
 8001e52:	47b0      	blx	r6
 8001e54:	1c43      	adds	r3, r0, #1
 8001e56:	89a3      	ldrh	r3, [r4, #12]
 8001e58:	d106      	bne.n	8001e68 <__sflush_r+0x68>
 8001e5a:	6829      	ldr	r1, [r5, #0]
 8001e5c:	291d      	cmp	r1, #29
 8001e5e:	d848      	bhi.n	8001ef2 <__sflush_r+0xf2>
 8001e60:	4a29      	ldr	r2, [pc, #164]	; (8001f08 <__sflush_r+0x108>)
 8001e62:	40ca      	lsrs	r2, r1
 8001e64:	07d6      	lsls	r6, r2, #31
 8001e66:	d544      	bpl.n	8001ef2 <__sflush_r+0xf2>
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6062      	str	r2, [r4, #4]
 8001e6c:	04d9      	lsls	r1, r3, #19
 8001e6e:	6922      	ldr	r2, [r4, #16]
 8001e70:	6022      	str	r2, [r4, #0]
 8001e72:	d504      	bpl.n	8001e7e <__sflush_r+0x7e>
 8001e74:	1c42      	adds	r2, r0, #1
 8001e76:	d101      	bne.n	8001e7c <__sflush_r+0x7c>
 8001e78:	682b      	ldr	r3, [r5, #0]
 8001e7a:	b903      	cbnz	r3, 8001e7e <__sflush_r+0x7e>
 8001e7c:	6560      	str	r0, [r4, #84]	; 0x54
 8001e7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e80:	602f      	str	r7, [r5, #0]
 8001e82:	2900      	cmp	r1, #0
 8001e84:	d0c9      	beq.n	8001e1a <__sflush_r+0x1a>
 8001e86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e8a:	4299      	cmp	r1, r3
 8001e8c:	d002      	beq.n	8001e94 <__sflush_r+0x94>
 8001e8e:	4628      	mov	r0, r5
 8001e90:	f000 f87a 	bl	8001f88 <_free_r>
 8001e94:	2000      	movs	r0, #0
 8001e96:	6360      	str	r0, [r4, #52]	; 0x34
 8001e98:	e7c0      	b.n	8001e1c <__sflush_r+0x1c>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	47b0      	blx	r6
 8001ea0:	1c41      	adds	r1, r0, #1
 8001ea2:	d1c8      	bne.n	8001e36 <__sflush_r+0x36>
 8001ea4:	682b      	ldr	r3, [r5, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0c5      	beq.n	8001e36 <__sflush_r+0x36>
 8001eaa:	2b1d      	cmp	r3, #29
 8001eac:	d001      	beq.n	8001eb2 <__sflush_r+0xb2>
 8001eae:	2b16      	cmp	r3, #22
 8001eb0:	d101      	bne.n	8001eb6 <__sflush_r+0xb6>
 8001eb2:	602f      	str	r7, [r5, #0]
 8001eb4:	e7b1      	b.n	8001e1a <__sflush_r+0x1a>
 8001eb6:	89a3      	ldrh	r3, [r4, #12]
 8001eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ebc:	81a3      	strh	r3, [r4, #12]
 8001ebe:	e7ad      	b.n	8001e1c <__sflush_r+0x1c>
 8001ec0:	690f      	ldr	r7, [r1, #16]
 8001ec2:	2f00      	cmp	r7, #0
 8001ec4:	d0a9      	beq.n	8001e1a <__sflush_r+0x1a>
 8001ec6:	0793      	lsls	r3, r2, #30
 8001ec8:	680e      	ldr	r6, [r1, #0]
 8001eca:	bf08      	it	eq
 8001ecc:	694b      	ldreq	r3, [r1, #20]
 8001ece:	600f      	str	r7, [r1, #0]
 8001ed0:	bf18      	it	ne
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	eba6 0807 	sub.w	r8, r6, r7
 8001ed8:	608b      	str	r3, [r1, #8]
 8001eda:	f1b8 0f00 	cmp.w	r8, #0
 8001ede:	dd9c      	ble.n	8001e1a <__sflush_r+0x1a>
 8001ee0:	4643      	mov	r3, r8
 8001ee2:	463a      	mov	r2, r7
 8001ee4:	6a21      	ldr	r1, [r4, #32]
 8001ee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ee8:	4628      	mov	r0, r5
 8001eea:	47b0      	blx	r6
 8001eec:	2800      	cmp	r0, #0
 8001eee:	dc06      	bgt.n	8001efe <__sflush_r+0xfe>
 8001ef0:	89a3      	ldrh	r3, [r4, #12]
 8001ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef6:	81a3      	strh	r3, [r4, #12]
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	e78e      	b.n	8001e1c <__sflush_r+0x1c>
 8001efe:	4407      	add	r7, r0
 8001f00:	eba8 0800 	sub.w	r8, r8, r0
 8001f04:	e7e9      	b.n	8001eda <__sflush_r+0xda>
 8001f06:	bf00      	nop
 8001f08:	20400001 	.word	0x20400001

08001f0c <_fflush_r>:
 8001f0c:	b538      	push	{r3, r4, r5, lr}
 8001f0e:	690b      	ldr	r3, [r1, #16]
 8001f10:	4605      	mov	r5, r0
 8001f12:	460c      	mov	r4, r1
 8001f14:	b1db      	cbz	r3, 8001f4e <_fflush_r+0x42>
 8001f16:	b118      	cbz	r0, 8001f20 <_fflush_r+0x14>
 8001f18:	6983      	ldr	r3, [r0, #24]
 8001f1a:	b90b      	cbnz	r3, 8001f20 <_fflush_r+0x14>
 8001f1c:	f7ff fdd2 	bl	8001ac4 <__sinit>
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <_fflush_r+0x48>)
 8001f22:	429c      	cmp	r4, r3
 8001f24:	d109      	bne.n	8001f3a <_fflush_r+0x2e>
 8001f26:	686c      	ldr	r4, [r5, #4]
 8001f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f2c:	b17b      	cbz	r3, 8001f4e <_fflush_r+0x42>
 8001f2e:	4621      	mov	r1, r4
 8001f30:	4628      	mov	r0, r5
 8001f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f36:	f7ff bf63 	b.w	8001e00 <__sflush_r>
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <_fflush_r+0x4c>)
 8001f3c:	429c      	cmp	r4, r3
 8001f3e:	d101      	bne.n	8001f44 <_fflush_r+0x38>
 8001f40:	68ac      	ldr	r4, [r5, #8]
 8001f42:	e7f1      	b.n	8001f28 <_fflush_r+0x1c>
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <_fflush_r+0x50>)
 8001f46:	429c      	cmp	r4, r3
 8001f48:	bf08      	it	eq
 8001f4a:	68ec      	ldreq	r4, [r5, #12]
 8001f4c:	e7ec      	b.n	8001f28 <_fflush_r+0x1c>
 8001f4e:	2000      	movs	r0, #0
 8001f50:	bd38      	pop	{r3, r4, r5, pc}
 8001f52:	bf00      	nop
 8001f54:	080028f4 	.word	0x080028f4
 8001f58:	08002914 	.word	0x08002914
 8001f5c:	080028d4 	.word	0x080028d4

08001f60 <_lseek_r>:
 8001f60:	b538      	push	{r3, r4, r5, lr}
 8001f62:	4c07      	ldr	r4, [pc, #28]	; (8001f80 <_lseek_r+0x20>)
 8001f64:	4605      	mov	r5, r0
 8001f66:	4608      	mov	r0, r1
 8001f68:	4611      	mov	r1, r2
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	6022      	str	r2, [r4, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f7ff fcaf 	bl	80018d2 <_lseek>
 8001f74:	1c43      	adds	r3, r0, #1
 8001f76:	d102      	bne.n	8001f7e <_lseek_r+0x1e>
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	b103      	cbz	r3, 8001f7e <_lseek_r+0x1e>
 8001f7c:	602b      	str	r3, [r5, #0]
 8001f7e:	bd38      	pop	{r3, r4, r5, pc}
 8001f80:	2000017c 	.word	0x2000017c

08001f84 <__malloc_lock>:
 8001f84:	4770      	bx	lr

08001f86 <__malloc_unlock>:
 8001f86:	4770      	bx	lr

08001f88 <_free_r>:
 8001f88:	b538      	push	{r3, r4, r5, lr}
 8001f8a:	4605      	mov	r5, r0
 8001f8c:	2900      	cmp	r1, #0
 8001f8e:	d045      	beq.n	800201c <_free_r+0x94>
 8001f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f94:	1f0c      	subs	r4, r1, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bfb8      	it	lt
 8001f9a:	18e4      	addlt	r4, r4, r3
 8001f9c:	f7ff fff2 	bl	8001f84 <__malloc_lock>
 8001fa0:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <_free_r+0x98>)
 8001fa2:	6813      	ldr	r3, [r2, #0]
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	b933      	cbnz	r3, 8001fb6 <_free_r+0x2e>
 8001fa8:	6063      	str	r3, [r4, #4]
 8001faa:	6014      	str	r4, [r2, #0]
 8001fac:	4628      	mov	r0, r5
 8001fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fb2:	f7ff bfe8 	b.w	8001f86 <__malloc_unlock>
 8001fb6:	42a3      	cmp	r3, r4
 8001fb8:	d90c      	bls.n	8001fd4 <_free_r+0x4c>
 8001fba:	6821      	ldr	r1, [r4, #0]
 8001fbc:	1862      	adds	r2, r4, r1
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	bf04      	itt	eq
 8001fc2:	681a      	ldreq	r2, [r3, #0]
 8001fc4:	685b      	ldreq	r3, [r3, #4]
 8001fc6:	6063      	str	r3, [r4, #4]
 8001fc8:	bf04      	itt	eq
 8001fca:	1852      	addeq	r2, r2, r1
 8001fcc:	6022      	streq	r2, [r4, #0]
 8001fce:	6004      	str	r4, [r0, #0]
 8001fd0:	e7ec      	b.n	8001fac <_free_r+0x24>
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	b10a      	cbz	r2, 8001fdc <_free_r+0x54>
 8001fd8:	42a2      	cmp	r2, r4
 8001fda:	d9fa      	bls.n	8001fd2 <_free_r+0x4a>
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	1858      	adds	r0, r3, r1
 8001fe0:	42a0      	cmp	r0, r4
 8001fe2:	d10b      	bne.n	8001ffc <_free_r+0x74>
 8001fe4:	6820      	ldr	r0, [r4, #0]
 8001fe6:	4401      	add	r1, r0
 8001fe8:	1858      	adds	r0, r3, r1
 8001fea:	4282      	cmp	r2, r0
 8001fec:	6019      	str	r1, [r3, #0]
 8001fee:	d1dd      	bne.n	8001fac <_free_r+0x24>
 8001ff0:	6810      	ldr	r0, [r2, #0]
 8001ff2:	6852      	ldr	r2, [r2, #4]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	4401      	add	r1, r0
 8001ff8:	6019      	str	r1, [r3, #0]
 8001ffa:	e7d7      	b.n	8001fac <_free_r+0x24>
 8001ffc:	d902      	bls.n	8002004 <_free_r+0x7c>
 8001ffe:	230c      	movs	r3, #12
 8002000:	602b      	str	r3, [r5, #0]
 8002002:	e7d3      	b.n	8001fac <_free_r+0x24>
 8002004:	6820      	ldr	r0, [r4, #0]
 8002006:	1821      	adds	r1, r4, r0
 8002008:	428a      	cmp	r2, r1
 800200a:	bf04      	itt	eq
 800200c:	6811      	ldreq	r1, [r2, #0]
 800200e:	6852      	ldreq	r2, [r2, #4]
 8002010:	6062      	str	r2, [r4, #4]
 8002012:	bf04      	itt	eq
 8002014:	1809      	addeq	r1, r1, r0
 8002016:	6021      	streq	r1, [r4, #0]
 8002018:	605c      	str	r4, [r3, #4]
 800201a:	e7c7      	b.n	8001fac <_free_r+0x24>
 800201c:	bd38      	pop	{r3, r4, r5, pc}
 800201e:	bf00      	nop
 8002020:	20000158 	.word	0x20000158

08002024 <__sfputc_r>:
 8002024:	6893      	ldr	r3, [r2, #8]
 8002026:	3b01      	subs	r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	b410      	push	{r4}
 800202c:	6093      	str	r3, [r2, #8]
 800202e:	da07      	bge.n	8002040 <__sfputc_r+0x1c>
 8002030:	6994      	ldr	r4, [r2, #24]
 8002032:	42a3      	cmp	r3, r4
 8002034:	db01      	blt.n	800203a <__sfputc_r+0x16>
 8002036:	290a      	cmp	r1, #10
 8002038:	d102      	bne.n	8002040 <__sfputc_r+0x1c>
 800203a:	bc10      	pop	{r4}
 800203c:	f000 baca 	b.w	80025d4 <__swbuf_r>
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	1c58      	adds	r0, r3, #1
 8002044:	6010      	str	r0, [r2, #0]
 8002046:	7019      	strb	r1, [r3, #0]
 8002048:	4608      	mov	r0, r1
 800204a:	bc10      	pop	{r4}
 800204c:	4770      	bx	lr

0800204e <__sfputs_r>:
 800204e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002050:	4606      	mov	r6, r0
 8002052:	460f      	mov	r7, r1
 8002054:	4614      	mov	r4, r2
 8002056:	18d5      	adds	r5, r2, r3
 8002058:	42ac      	cmp	r4, r5
 800205a:	d101      	bne.n	8002060 <__sfputs_r+0x12>
 800205c:	2000      	movs	r0, #0
 800205e:	e007      	b.n	8002070 <__sfputs_r+0x22>
 8002060:	463a      	mov	r2, r7
 8002062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002066:	4630      	mov	r0, r6
 8002068:	f7ff ffdc 	bl	8002024 <__sfputc_r>
 800206c:	1c43      	adds	r3, r0, #1
 800206e:	d1f3      	bne.n	8002058 <__sfputs_r+0xa>
 8002070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002074 <_vfiprintf_r>:
 8002074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002078:	460c      	mov	r4, r1
 800207a:	b09d      	sub	sp, #116	; 0x74
 800207c:	4617      	mov	r7, r2
 800207e:	461d      	mov	r5, r3
 8002080:	4606      	mov	r6, r0
 8002082:	b118      	cbz	r0, 800208c <_vfiprintf_r+0x18>
 8002084:	6983      	ldr	r3, [r0, #24]
 8002086:	b90b      	cbnz	r3, 800208c <_vfiprintf_r+0x18>
 8002088:	f7ff fd1c 	bl	8001ac4 <__sinit>
 800208c:	4b7c      	ldr	r3, [pc, #496]	; (8002280 <_vfiprintf_r+0x20c>)
 800208e:	429c      	cmp	r4, r3
 8002090:	d158      	bne.n	8002144 <_vfiprintf_r+0xd0>
 8002092:	6874      	ldr	r4, [r6, #4]
 8002094:	89a3      	ldrh	r3, [r4, #12]
 8002096:	0718      	lsls	r0, r3, #28
 8002098:	d55e      	bpl.n	8002158 <_vfiprintf_r+0xe4>
 800209a:	6923      	ldr	r3, [r4, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d05b      	beq.n	8002158 <_vfiprintf_r+0xe4>
 80020a0:	2300      	movs	r3, #0
 80020a2:	9309      	str	r3, [sp, #36]	; 0x24
 80020a4:	2320      	movs	r3, #32
 80020a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80020aa:	2330      	movs	r3, #48	; 0x30
 80020ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020b0:	9503      	str	r5, [sp, #12]
 80020b2:	f04f 0b01 	mov.w	fp, #1
 80020b6:	46b8      	mov	r8, r7
 80020b8:	4645      	mov	r5, r8
 80020ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80020be:	b10b      	cbz	r3, 80020c4 <_vfiprintf_r+0x50>
 80020c0:	2b25      	cmp	r3, #37	; 0x25
 80020c2:	d154      	bne.n	800216e <_vfiprintf_r+0xfa>
 80020c4:	ebb8 0a07 	subs.w	sl, r8, r7
 80020c8:	d00b      	beq.n	80020e2 <_vfiprintf_r+0x6e>
 80020ca:	4653      	mov	r3, sl
 80020cc:	463a      	mov	r2, r7
 80020ce:	4621      	mov	r1, r4
 80020d0:	4630      	mov	r0, r6
 80020d2:	f7ff ffbc 	bl	800204e <__sfputs_r>
 80020d6:	3001      	adds	r0, #1
 80020d8:	f000 80c2 	beq.w	8002260 <_vfiprintf_r+0x1ec>
 80020dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020de:	4453      	add	r3, sl
 80020e0:	9309      	str	r3, [sp, #36]	; 0x24
 80020e2:	f898 3000 	ldrb.w	r3, [r8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80ba 	beq.w	8002260 <_vfiprintf_r+0x1ec>
 80020ec:	2300      	movs	r3, #0
 80020ee:	f04f 32ff 	mov.w	r2, #4294967295
 80020f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020f6:	9304      	str	r3, [sp, #16]
 80020f8:	9307      	str	r3, [sp, #28]
 80020fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020fe:	931a      	str	r3, [sp, #104]	; 0x68
 8002100:	46a8      	mov	r8, r5
 8002102:	2205      	movs	r2, #5
 8002104:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002108:	485e      	ldr	r0, [pc, #376]	; (8002284 <_vfiprintf_r+0x210>)
 800210a:	f7fe f881 	bl	8000210 <memchr>
 800210e:	9b04      	ldr	r3, [sp, #16]
 8002110:	bb78      	cbnz	r0, 8002172 <_vfiprintf_r+0xfe>
 8002112:	06d9      	lsls	r1, r3, #27
 8002114:	bf44      	itt	mi
 8002116:	2220      	movmi	r2, #32
 8002118:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800211c:	071a      	lsls	r2, r3, #28
 800211e:	bf44      	itt	mi
 8002120:	222b      	movmi	r2, #43	; 0x2b
 8002122:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002126:	782a      	ldrb	r2, [r5, #0]
 8002128:	2a2a      	cmp	r2, #42	; 0x2a
 800212a:	d02a      	beq.n	8002182 <_vfiprintf_r+0x10e>
 800212c:	9a07      	ldr	r2, [sp, #28]
 800212e:	46a8      	mov	r8, r5
 8002130:	2000      	movs	r0, #0
 8002132:	250a      	movs	r5, #10
 8002134:	4641      	mov	r1, r8
 8002136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800213a:	3b30      	subs	r3, #48	; 0x30
 800213c:	2b09      	cmp	r3, #9
 800213e:	d969      	bls.n	8002214 <_vfiprintf_r+0x1a0>
 8002140:	b360      	cbz	r0, 800219c <_vfiprintf_r+0x128>
 8002142:	e024      	b.n	800218e <_vfiprintf_r+0x11a>
 8002144:	4b50      	ldr	r3, [pc, #320]	; (8002288 <_vfiprintf_r+0x214>)
 8002146:	429c      	cmp	r4, r3
 8002148:	d101      	bne.n	800214e <_vfiprintf_r+0xda>
 800214a:	68b4      	ldr	r4, [r6, #8]
 800214c:	e7a2      	b.n	8002094 <_vfiprintf_r+0x20>
 800214e:	4b4f      	ldr	r3, [pc, #316]	; (800228c <_vfiprintf_r+0x218>)
 8002150:	429c      	cmp	r4, r3
 8002152:	bf08      	it	eq
 8002154:	68f4      	ldreq	r4, [r6, #12]
 8002156:	e79d      	b.n	8002094 <_vfiprintf_r+0x20>
 8002158:	4621      	mov	r1, r4
 800215a:	4630      	mov	r0, r6
 800215c:	f000 fa8c 	bl	8002678 <__swsetup_r>
 8002160:	2800      	cmp	r0, #0
 8002162:	d09d      	beq.n	80020a0 <_vfiprintf_r+0x2c>
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	b01d      	add	sp, #116	; 0x74
 800216a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800216e:	46a8      	mov	r8, r5
 8002170:	e7a2      	b.n	80020b8 <_vfiprintf_r+0x44>
 8002172:	4a44      	ldr	r2, [pc, #272]	; (8002284 <_vfiprintf_r+0x210>)
 8002174:	1a80      	subs	r0, r0, r2
 8002176:	fa0b f000 	lsl.w	r0, fp, r0
 800217a:	4318      	orrs	r0, r3
 800217c:	9004      	str	r0, [sp, #16]
 800217e:	4645      	mov	r5, r8
 8002180:	e7be      	b.n	8002100 <_vfiprintf_r+0x8c>
 8002182:	9a03      	ldr	r2, [sp, #12]
 8002184:	1d11      	adds	r1, r2, #4
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	9103      	str	r1, [sp, #12]
 800218a:	2a00      	cmp	r2, #0
 800218c:	db01      	blt.n	8002192 <_vfiprintf_r+0x11e>
 800218e:	9207      	str	r2, [sp, #28]
 8002190:	e004      	b.n	800219c <_vfiprintf_r+0x128>
 8002192:	4252      	negs	r2, r2
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	9207      	str	r2, [sp, #28]
 800219a:	9304      	str	r3, [sp, #16]
 800219c:	f898 3000 	ldrb.w	r3, [r8]
 80021a0:	2b2e      	cmp	r3, #46	; 0x2e
 80021a2:	d10e      	bne.n	80021c2 <_vfiprintf_r+0x14e>
 80021a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80021a8:	2b2a      	cmp	r3, #42	; 0x2a
 80021aa:	d138      	bne.n	800221e <_vfiprintf_r+0x1aa>
 80021ac:	9b03      	ldr	r3, [sp, #12]
 80021ae:	1d1a      	adds	r2, r3, #4
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	9203      	str	r2, [sp, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bfb8      	it	lt
 80021b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80021bc:	f108 0802 	add.w	r8, r8, #2
 80021c0:	9305      	str	r3, [sp, #20]
 80021c2:	4d33      	ldr	r5, [pc, #204]	; (8002290 <_vfiprintf_r+0x21c>)
 80021c4:	f898 1000 	ldrb.w	r1, [r8]
 80021c8:	2203      	movs	r2, #3
 80021ca:	4628      	mov	r0, r5
 80021cc:	f7fe f820 	bl	8000210 <memchr>
 80021d0:	b140      	cbz	r0, 80021e4 <_vfiprintf_r+0x170>
 80021d2:	2340      	movs	r3, #64	; 0x40
 80021d4:	1b40      	subs	r0, r0, r5
 80021d6:	fa03 f000 	lsl.w	r0, r3, r0
 80021da:	9b04      	ldr	r3, [sp, #16]
 80021dc:	4303      	orrs	r3, r0
 80021de:	f108 0801 	add.w	r8, r8, #1
 80021e2:	9304      	str	r3, [sp, #16]
 80021e4:	f898 1000 	ldrb.w	r1, [r8]
 80021e8:	482a      	ldr	r0, [pc, #168]	; (8002294 <_vfiprintf_r+0x220>)
 80021ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021ee:	2206      	movs	r2, #6
 80021f0:	f108 0701 	add.w	r7, r8, #1
 80021f4:	f7fe f80c 	bl	8000210 <memchr>
 80021f8:	2800      	cmp	r0, #0
 80021fa:	d037      	beq.n	800226c <_vfiprintf_r+0x1f8>
 80021fc:	4b26      	ldr	r3, [pc, #152]	; (8002298 <_vfiprintf_r+0x224>)
 80021fe:	bb1b      	cbnz	r3, 8002248 <_vfiprintf_r+0x1d4>
 8002200:	9b03      	ldr	r3, [sp, #12]
 8002202:	3307      	adds	r3, #7
 8002204:	f023 0307 	bic.w	r3, r3, #7
 8002208:	3308      	adds	r3, #8
 800220a:	9303      	str	r3, [sp, #12]
 800220c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800220e:	444b      	add	r3, r9
 8002210:	9309      	str	r3, [sp, #36]	; 0x24
 8002212:	e750      	b.n	80020b6 <_vfiprintf_r+0x42>
 8002214:	fb05 3202 	mla	r2, r5, r2, r3
 8002218:	2001      	movs	r0, #1
 800221a:	4688      	mov	r8, r1
 800221c:	e78a      	b.n	8002134 <_vfiprintf_r+0xc0>
 800221e:	2300      	movs	r3, #0
 8002220:	f108 0801 	add.w	r8, r8, #1
 8002224:	9305      	str	r3, [sp, #20]
 8002226:	4619      	mov	r1, r3
 8002228:	250a      	movs	r5, #10
 800222a:	4640      	mov	r0, r8
 800222c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002230:	3a30      	subs	r2, #48	; 0x30
 8002232:	2a09      	cmp	r2, #9
 8002234:	d903      	bls.n	800223e <_vfiprintf_r+0x1ca>
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0c3      	beq.n	80021c2 <_vfiprintf_r+0x14e>
 800223a:	9105      	str	r1, [sp, #20]
 800223c:	e7c1      	b.n	80021c2 <_vfiprintf_r+0x14e>
 800223e:	fb05 2101 	mla	r1, r5, r1, r2
 8002242:	2301      	movs	r3, #1
 8002244:	4680      	mov	r8, r0
 8002246:	e7f0      	b.n	800222a <_vfiprintf_r+0x1b6>
 8002248:	ab03      	add	r3, sp, #12
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	4622      	mov	r2, r4
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <_vfiprintf_r+0x228>)
 8002250:	a904      	add	r1, sp, #16
 8002252:	4630      	mov	r0, r6
 8002254:	f3af 8000 	nop.w
 8002258:	f1b0 3fff 	cmp.w	r0, #4294967295
 800225c:	4681      	mov	r9, r0
 800225e:	d1d5      	bne.n	800220c <_vfiprintf_r+0x198>
 8002260:	89a3      	ldrh	r3, [r4, #12]
 8002262:	065b      	lsls	r3, r3, #25
 8002264:	f53f af7e 	bmi.w	8002164 <_vfiprintf_r+0xf0>
 8002268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800226a:	e77d      	b.n	8002168 <_vfiprintf_r+0xf4>
 800226c:	ab03      	add	r3, sp, #12
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	4622      	mov	r2, r4
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <_vfiprintf_r+0x228>)
 8002274:	a904      	add	r1, sp, #16
 8002276:	4630      	mov	r0, r6
 8002278:	f000 f888 	bl	800238c <_printf_i>
 800227c:	e7ec      	b.n	8002258 <_vfiprintf_r+0x1e4>
 800227e:	bf00      	nop
 8002280:	080028f4 	.word	0x080028f4
 8002284:	08002938 	.word	0x08002938
 8002288:	08002914 	.word	0x08002914
 800228c:	080028d4 	.word	0x080028d4
 8002290:	0800293e 	.word	0x0800293e
 8002294:	08002942 	.word	0x08002942
 8002298:	00000000 	.word	0x00000000
 800229c:	0800204f 	.word	0x0800204f

080022a0 <_printf_common>:
 80022a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022a4:	4691      	mov	r9, r2
 80022a6:	461f      	mov	r7, r3
 80022a8:	688a      	ldr	r2, [r1, #8]
 80022aa:	690b      	ldr	r3, [r1, #16]
 80022ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022b0:	4293      	cmp	r3, r2
 80022b2:	bfb8      	it	lt
 80022b4:	4613      	movlt	r3, r2
 80022b6:	f8c9 3000 	str.w	r3, [r9]
 80022ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022be:	4606      	mov	r6, r0
 80022c0:	460c      	mov	r4, r1
 80022c2:	b112      	cbz	r2, 80022ca <_printf_common+0x2a>
 80022c4:	3301      	adds	r3, #1
 80022c6:	f8c9 3000 	str.w	r3, [r9]
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	0699      	lsls	r1, r3, #26
 80022ce:	bf42      	ittt	mi
 80022d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80022d4:	3302      	addmi	r3, #2
 80022d6:	f8c9 3000 	strmi.w	r3, [r9]
 80022da:	6825      	ldr	r5, [r4, #0]
 80022dc:	f015 0506 	ands.w	r5, r5, #6
 80022e0:	d107      	bne.n	80022f2 <_printf_common+0x52>
 80022e2:	f104 0a19 	add.w	sl, r4, #25
 80022e6:	68e3      	ldr	r3, [r4, #12]
 80022e8:	f8d9 2000 	ldr.w	r2, [r9]
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	42ab      	cmp	r3, r5
 80022f0:	dc28      	bgt.n	8002344 <_printf_common+0xa4>
 80022f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80022f6:	6822      	ldr	r2, [r4, #0]
 80022f8:	3300      	adds	r3, #0
 80022fa:	bf18      	it	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	0692      	lsls	r2, r2, #26
 8002300:	d42d      	bmi.n	800235e <_printf_common+0xbe>
 8002302:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002306:	4639      	mov	r1, r7
 8002308:	4630      	mov	r0, r6
 800230a:	47c0      	blx	r8
 800230c:	3001      	adds	r0, #1
 800230e:	d020      	beq.n	8002352 <_printf_common+0xb2>
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	68e5      	ldr	r5, [r4, #12]
 8002314:	f8d9 2000 	ldr.w	r2, [r9]
 8002318:	f003 0306 	and.w	r3, r3, #6
 800231c:	2b04      	cmp	r3, #4
 800231e:	bf08      	it	eq
 8002320:	1aad      	subeq	r5, r5, r2
 8002322:	68a3      	ldr	r3, [r4, #8]
 8002324:	6922      	ldr	r2, [r4, #16]
 8002326:	bf0c      	ite	eq
 8002328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800232c:	2500      	movne	r5, #0
 800232e:	4293      	cmp	r3, r2
 8002330:	bfc4      	itt	gt
 8002332:	1a9b      	subgt	r3, r3, r2
 8002334:	18ed      	addgt	r5, r5, r3
 8002336:	f04f 0900 	mov.w	r9, #0
 800233a:	341a      	adds	r4, #26
 800233c:	454d      	cmp	r5, r9
 800233e:	d11a      	bne.n	8002376 <_printf_common+0xd6>
 8002340:	2000      	movs	r0, #0
 8002342:	e008      	b.n	8002356 <_printf_common+0xb6>
 8002344:	2301      	movs	r3, #1
 8002346:	4652      	mov	r2, sl
 8002348:	4639      	mov	r1, r7
 800234a:	4630      	mov	r0, r6
 800234c:	47c0      	blx	r8
 800234e:	3001      	adds	r0, #1
 8002350:	d103      	bne.n	800235a <_printf_common+0xba>
 8002352:	f04f 30ff 	mov.w	r0, #4294967295
 8002356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800235a:	3501      	adds	r5, #1
 800235c:	e7c3      	b.n	80022e6 <_printf_common+0x46>
 800235e:	18e1      	adds	r1, r4, r3
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	2030      	movs	r0, #48	; 0x30
 8002364:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002368:	4422      	add	r2, r4
 800236a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800236e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002372:	3302      	adds	r3, #2
 8002374:	e7c5      	b.n	8002302 <_printf_common+0x62>
 8002376:	2301      	movs	r3, #1
 8002378:	4622      	mov	r2, r4
 800237a:	4639      	mov	r1, r7
 800237c:	4630      	mov	r0, r6
 800237e:	47c0      	blx	r8
 8002380:	3001      	adds	r0, #1
 8002382:	d0e6      	beq.n	8002352 <_printf_common+0xb2>
 8002384:	f109 0901 	add.w	r9, r9, #1
 8002388:	e7d8      	b.n	800233c <_printf_common+0x9c>
	...

0800238c <_printf_i>:
 800238c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002390:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002394:	460c      	mov	r4, r1
 8002396:	7e09      	ldrb	r1, [r1, #24]
 8002398:	b085      	sub	sp, #20
 800239a:	296e      	cmp	r1, #110	; 0x6e
 800239c:	4617      	mov	r7, r2
 800239e:	4606      	mov	r6, r0
 80023a0:	4698      	mov	r8, r3
 80023a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80023a4:	f000 80b3 	beq.w	800250e <_printf_i+0x182>
 80023a8:	d822      	bhi.n	80023f0 <_printf_i+0x64>
 80023aa:	2963      	cmp	r1, #99	; 0x63
 80023ac:	d036      	beq.n	800241c <_printf_i+0x90>
 80023ae:	d80a      	bhi.n	80023c6 <_printf_i+0x3a>
 80023b0:	2900      	cmp	r1, #0
 80023b2:	f000 80b9 	beq.w	8002528 <_printf_i+0x19c>
 80023b6:	2958      	cmp	r1, #88	; 0x58
 80023b8:	f000 8083 	beq.w	80024c2 <_printf_i+0x136>
 80023bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80023c4:	e032      	b.n	800242c <_printf_i+0xa0>
 80023c6:	2964      	cmp	r1, #100	; 0x64
 80023c8:	d001      	beq.n	80023ce <_printf_i+0x42>
 80023ca:	2969      	cmp	r1, #105	; 0x69
 80023cc:	d1f6      	bne.n	80023bc <_printf_i+0x30>
 80023ce:	6820      	ldr	r0, [r4, #0]
 80023d0:	6813      	ldr	r3, [r2, #0]
 80023d2:	0605      	lsls	r5, r0, #24
 80023d4:	f103 0104 	add.w	r1, r3, #4
 80023d8:	d52a      	bpl.n	8002430 <_printf_i+0xa4>
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6011      	str	r1, [r2, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	da03      	bge.n	80023ea <_printf_i+0x5e>
 80023e2:	222d      	movs	r2, #45	; 0x2d
 80023e4:	425b      	negs	r3, r3
 80023e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80023ea:	486f      	ldr	r0, [pc, #444]	; (80025a8 <_printf_i+0x21c>)
 80023ec:	220a      	movs	r2, #10
 80023ee:	e039      	b.n	8002464 <_printf_i+0xd8>
 80023f0:	2973      	cmp	r1, #115	; 0x73
 80023f2:	f000 809d 	beq.w	8002530 <_printf_i+0x1a4>
 80023f6:	d808      	bhi.n	800240a <_printf_i+0x7e>
 80023f8:	296f      	cmp	r1, #111	; 0x6f
 80023fa:	d020      	beq.n	800243e <_printf_i+0xb2>
 80023fc:	2970      	cmp	r1, #112	; 0x70
 80023fe:	d1dd      	bne.n	80023bc <_printf_i+0x30>
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	f043 0320 	orr.w	r3, r3, #32
 8002406:	6023      	str	r3, [r4, #0]
 8002408:	e003      	b.n	8002412 <_printf_i+0x86>
 800240a:	2975      	cmp	r1, #117	; 0x75
 800240c:	d017      	beq.n	800243e <_printf_i+0xb2>
 800240e:	2978      	cmp	r1, #120	; 0x78
 8002410:	d1d4      	bne.n	80023bc <_printf_i+0x30>
 8002412:	2378      	movs	r3, #120	; 0x78
 8002414:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002418:	4864      	ldr	r0, [pc, #400]	; (80025ac <_printf_i+0x220>)
 800241a:	e055      	b.n	80024c8 <_printf_i+0x13c>
 800241c:	6813      	ldr	r3, [r2, #0]
 800241e:	1d19      	adds	r1, r3, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6011      	str	r1, [r2, #0]
 8002424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800242c:	2301      	movs	r3, #1
 800242e:	e08c      	b.n	800254a <_printf_i+0x1be>
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6011      	str	r1, [r2, #0]
 8002434:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002438:	bf18      	it	ne
 800243a:	b21b      	sxthne	r3, r3
 800243c:	e7cf      	b.n	80023de <_printf_i+0x52>
 800243e:	6813      	ldr	r3, [r2, #0]
 8002440:	6825      	ldr	r5, [r4, #0]
 8002442:	1d18      	adds	r0, r3, #4
 8002444:	6010      	str	r0, [r2, #0]
 8002446:	0628      	lsls	r0, r5, #24
 8002448:	d501      	bpl.n	800244e <_printf_i+0xc2>
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	e002      	b.n	8002454 <_printf_i+0xc8>
 800244e:	0668      	lsls	r0, r5, #25
 8002450:	d5fb      	bpl.n	800244a <_printf_i+0xbe>
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	4854      	ldr	r0, [pc, #336]	; (80025a8 <_printf_i+0x21c>)
 8002456:	296f      	cmp	r1, #111	; 0x6f
 8002458:	bf14      	ite	ne
 800245a:	220a      	movne	r2, #10
 800245c:	2208      	moveq	r2, #8
 800245e:	2100      	movs	r1, #0
 8002460:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002464:	6865      	ldr	r5, [r4, #4]
 8002466:	60a5      	str	r5, [r4, #8]
 8002468:	2d00      	cmp	r5, #0
 800246a:	f2c0 8095 	blt.w	8002598 <_printf_i+0x20c>
 800246e:	6821      	ldr	r1, [r4, #0]
 8002470:	f021 0104 	bic.w	r1, r1, #4
 8002474:	6021      	str	r1, [r4, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d13d      	bne.n	80024f6 <_printf_i+0x16a>
 800247a:	2d00      	cmp	r5, #0
 800247c:	f040 808e 	bne.w	800259c <_printf_i+0x210>
 8002480:	4665      	mov	r5, ip
 8002482:	2a08      	cmp	r2, #8
 8002484:	d10b      	bne.n	800249e <_printf_i+0x112>
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	07db      	lsls	r3, r3, #31
 800248a:	d508      	bpl.n	800249e <_printf_i+0x112>
 800248c:	6923      	ldr	r3, [r4, #16]
 800248e:	6862      	ldr	r2, [r4, #4]
 8002490:	429a      	cmp	r2, r3
 8002492:	bfde      	ittt	le
 8002494:	2330      	movle	r3, #48	; 0x30
 8002496:	f805 3c01 	strble.w	r3, [r5, #-1]
 800249a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800249e:	ebac 0305 	sub.w	r3, ip, r5
 80024a2:	6123      	str	r3, [r4, #16]
 80024a4:	f8cd 8000 	str.w	r8, [sp]
 80024a8:	463b      	mov	r3, r7
 80024aa:	aa03      	add	r2, sp, #12
 80024ac:	4621      	mov	r1, r4
 80024ae:	4630      	mov	r0, r6
 80024b0:	f7ff fef6 	bl	80022a0 <_printf_common>
 80024b4:	3001      	adds	r0, #1
 80024b6:	d14d      	bne.n	8002554 <_printf_i+0x1c8>
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	b005      	add	sp, #20
 80024be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024c2:	4839      	ldr	r0, [pc, #228]	; (80025a8 <_printf_i+0x21c>)
 80024c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80024c8:	6813      	ldr	r3, [r2, #0]
 80024ca:	6821      	ldr	r1, [r4, #0]
 80024cc:	1d1d      	adds	r5, r3, #4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6015      	str	r5, [r2, #0]
 80024d2:	060a      	lsls	r2, r1, #24
 80024d4:	d50b      	bpl.n	80024ee <_printf_i+0x162>
 80024d6:	07ca      	lsls	r2, r1, #31
 80024d8:	bf44      	itt	mi
 80024da:	f041 0120 	orrmi.w	r1, r1, #32
 80024de:	6021      	strmi	r1, [r4, #0]
 80024e0:	b91b      	cbnz	r3, 80024ea <_printf_i+0x15e>
 80024e2:	6822      	ldr	r2, [r4, #0]
 80024e4:	f022 0220 	bic.w	r2, r2, #32
 80024e8:	6022      	str	r2, [r4, #0]
 80024ea:	2210      	movs	r2, #16
 80024ec:	e7b7      	b.n	800245e <_printf_i+0xd2>
 80024ee:	064d      	lsls	r5, r1, #25
 80024f0:	bf48      	it	mi
 80024f2:	b29b      	uxthmi	r3, r3
 80024f4:	e7ef      	b.n	80024d6 <_printf_i+0x14a>
 80024f6:	4665      	mov	r5, ip
 80024f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80024fc:	fb02 3311 	mls	r3, r2, r1, r3
 8002500:	5cc3      	ldrb	r3, [r0, r3]
 8002502:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002506:	460b      	mov	r3, r1
 8002508:	2900      	cmp	r1, #0
 800250a:	d1f5      	bne.n	80024f8 <_printf_i+0x16c>
 800250c:	e7b9      	b.n	8002482 <_printf_i+0xf6>
 800250e:	6813      	ldr	r3, [r2, #0]
 8002510:	6825      	ldr	r5, [r4, #0]
 8002512:	6961      	ldr	r1, [r4, #20]
 8002514:	1d18      	adds	r0, r3, #4
 8002516:	6010      	str	r0, [r2, #0]
 8002518:	0628      	lsls	r0, r5, #24
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	d501      	bpl.n	8002522 <_printf_i+0x196>
 800251e:	6019      	str	r1, [r3, #0]
 8002520:	e002      	b.n	8002528 <_printf_i+0x19c>
 8002522:	066a      	lsls	r2, r5, #25
 8002524:	d5fb      	bpl.n	800251e <_printf_i+0x192>
 8002526:	8019      	strh	r1, [r3, #0]
 8002528:	2300      	movs	r3, #0
 800252a:	6123      	str	r3, [r4, #16]
 800252c:	4665      	mov	r5, ip
 800252e:	e7b9      	b.n	80024a4 <_printf_i+0x118>
 8002530:	6813      	ldr	r3, [r2, #0]
 8002532:	1d19      	adds	r1, r3, #4
 8002534:	6011      	str	r1, [r2, #0]
 8002536:	681d      	ldr	r5, [r3, #0]
 8002538:	6862      	ldr	r2, [r4, #4]
 800253a:	2100      	movs	r1, #0
 800253c:	4628      	mov	r0, r5
 800253e:	f7fd fe67 	bl	8000210 <memchr>
 8002542:	b108      	cbz	r0, 8002548 <_printf_i+0x1bc>
 8002544:	1b40      	subs	r0, r0, r5
 8002546:	6060      	str	r0, [r4, #4]
 8002548:	6863      	ldr	r3, [r4, #4]
 800254a:	6123      	str	r3, [r4, #16]
 800254c:	2300      	movs	r3, #0
 800254e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002552:	e7a7      	b.n	80024a4 <_printf_i+0x118>
 8002554:	6923      	ldr	r3, [r4, #16]
 8002556:	462a      	mov	r2, r5
 8002558:	4639      	mov	r1, r7
 800255a:	4630      	mov	r0, r6
 800255c:	47c0      	blx	r8
 800255e:	3001      	adds	r0, #1
 8002560:	d0aa      	beq.n	80024b8 <_printf_i+0x12c>
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	079b      	lsls	r3, r3, #30
 8002566:	d413      	bmi.n	8002590 <_printf_i+0x204>
 8002568:	68e0      	ldr	r0, [r4, #12]
 800256a:	9b03      	ldr	r3, [sp, #12]
 800256c:	4298      	cmp	r0, r3
 800256e:	bfb8      	it	lt
 8002570:	4618      	movlt	r0, r3
 8002572:	e7a3      	b.n	80024bc <_printf_i+0x130>
 8002574:	2301      	movs	r3, #1
 8002576:	464a      	mov	r2, r9
 8002578:	4639      	mov	r1, r7
 800257a:	4630      	mov	r0, r6
 800257c:	47c0      	blx	r8
 800257e:	3001      	adds	r0, #1
 8002580:	d09a      	beq.n	80024b8 <_printf_i+0x12c>
 8002582:	3501      	adds	r5, #1
 8002584:	68e3      	ldr	r3, [r4, #12]
 8002586:	9a03      	ldr	r2, [sp, #12]
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	42ab      	cmp	r3, r5
 800258c:	dcf2      	bgt.n	8002574 <_printf_i+0x1e8>
 800258e:	e7eb      	b.n	8002568 <_printf_i+0x1dc>
 8002590:	2500      	movs	r5, #0
 8002592:	f104 0919 	add.w	r9, r4, #25
 8002596:	e7f5      	b.n	8002584 <_printf_i+0x1f8>
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ac      	bne.n	80024f6 <_printf_i+0x16a>
 800259c:	7803      	ldrb	r3, [r0, #0]
 800259e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025a6:	e76c      	b.n	8002482 <_printf_i+0xf6>
 80025a8:	08002949 	.word	0x08002949
 80025ac:	0800295a 	.word	0x0800295a

080025b0 <_read_r>:
 80025b0:	b538      	push	{r3, r4, r5, lr}
 80025b2:	4c07      	ldr	r4, [pc, #28]	; (80025d0 <_read_r+0x20>)
 80025b4:	4605      	mov	r5, r0
 80025b6:	4608      	mov	r0, r1
 80025b8:	4611      	mov	r1, r2
 80025ba:	2200      	movs	r2, #0
 80025bc:	6022      	str	r2, [r4, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	f7ff f930 	bl	8001824 <_read>
 80025c4:	1c43      	adds	r3, r0, #1
 80025c6:	d102      	bne.n	80025ce <_read_r+0x1e>
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	b103      	cbz	r3, 80025ce <_read_r+0x1e>
 80025cc:	602b      	str	r3, [r5, #0]
 80025ce:	bd38      	pop	{r3, r4, r5, pc}
 80025d0:	2000017c 	.word	0x2000017c

080025d4 <__swbuf_r>:
 80025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d6:	460e      	mov	r6, r1
 80025d8:	4614      	mov	r4, r2
 80025da:	4605      	mov	r5, r0
 80025dc:	b118      	cbz	r0, 80025e6 <__swbuf_r+0x12>
 80025de:	6983      	ldr	r3, [r0, #24]
 80025e0:	b90b      	cbnz	r3, 80025e6 <__swbuf_r+0x12>
 80025e2:	f7ff fa6f 	bl	8001ac4 <__sinit>
 80025e6:	4b21      	ldr	r3, [pc, #132]	; (800266c <__swbuf_r+0x98>)
 80025e8:	429c      	cmp	r4, r3
 80025ea:	d12a      	bne.n	8002642 <__swbuf_r+0x6e>
 80025ec:	686c      	ldr	r4, [r5, #4]
 80025ee:	69a3      	ldr	r3, [r4, #24]
 80025f0:	60a3      	str	r3, [r4, #8]
 80025f2:	89a3      	ldrh	r3, [r4, #12]
 80025f4:	071a      	lsls	r2, r3, #28
 80025f6:	d52e      	bpl.n	8002656 <__swbuf_r+0x82>
 80025f8:	6923      	ldr	r3, [r4, #16]
 80025fa:	b363      	cbz	r3, 8002656 <__swbuf_r+0x82>
 80025fc:	6923      	ldr	r3, [r4, #16]
 80025fe:	6820      	ldr	r0, [r4, #0]
 8002600:	1ac0      	subs	r0, r0, r3
 8002602:	6963      	ldr	r3, [r4, #20]
 8002604:	b2f6      	uxtb	r6, r6
 8002606:	4283      	cmp	r3, r0
 8002608:	4637      	mov	r7, r6
 800260a:	dc04      	bgt.n	8002616 <__swbuf_r+0x42>
 800260c:	4621      	mov	r1, r4
 800260e:	4628      	mov	r0, r5
 8002610:	f7ff fc7c 	bl	8001f0c <_fflush_r>
 8002614:	bb28      	cbnz	r0, 8002662 <__swbuf_r+0x8e>
 8002616:	68a3      	ldr	r3, [r4, #8]
 8002618:	3b01      	subs	r3, #1
 800261a:	60a3      	str	r3, [r4, #8]
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	6022      	str	r2, [r4, #0]
 8002622:	701e      	strb	r6, [r3, #0]
 8002624:	6963      	ldr	r3, [r4, #20]
 8002626:	3001      	adds	r0, #1
 8002628:	4283      	cmp	r3, r0
 800262a:	d004      	beq.n	8002636 <__swbuf_r+0x62>
 800262c:	89a3      	ldrh	r3, [r4, #12]
 800262e:	07db      	lsls	r3, r3, #31
 8002630:	d519      	bpl.n	8002666 <__swbuf_r+0x92>
 8002632:	2e0a      	cmp	r6, #10
 8002634:	d117      	bne.n	8002666 <__swbuf_r+0x92>
 8002636:	4621      	mov	r1, r4
 8002638:	4628      	mov	r0, r5
 800263a:	f7ff fc67 	bl	8001f0c <_fflush_r>
 800263e:	b190      	cbz	r0, 8002666 <__swbuf_r+0x92>
 8002640:	e00f      	b.n	8002662 <__swbuf_r+0x8e>
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <__swbuf_r+0x9c>)
 8002644:	429c      	cmp	r4, r3
 8002646:	d101      	bne.n	800264c <__swbuf_r+0x78>
 8002648:	68ac      	ldr	r4, [r5, #8]
 800264a:	e7d0      	b.n	80025ee <__swbuf_r+0x1a>
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <__swbuf_r+0xa0>)
 800264e:	429c      	cmp	r4, r3
 8002650:	bf08      	it	eq
 8002652:	68ec      	ldreq	r4, [r5, #12]
 8002654:	e7cb      	b.n	80025ee <__swbuf_r+0x1a>
 8002656:	4621      	mov	r1, r4
 8002658:	4628      	mov	r0, r5
 800265a:	f000 f80d 	bl	8002678 <__swsetup_r>
 800265e:	2800      	cmp	r0, #0
 8002660:	d0cc      	beq.n	80025fc <__swbuf_r+0x28>
 8002662:	f04f 37ff 	mov.w	r7, #4294967295
 8002666:	4638      	mov	r0, r7
 8002668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800266a:	bf00      	nop
 800266c:	080028f4 	.word	0x080028f4
 8002670:	08002914 	.word	0x08002914
 8002674:	080028d4 	.word	0x080028d4

08002678 <__swsetup_r>:
 8002678:	4b32      	ldr	r3, [pc, #200]	; (8002744 <__swsetup_r+0xcc>)
 800267a:	b570      	push	{r4, r5, r6, lr}
 800267c:	681d      	ldr	r5, [r3, #0]
 800267e:	4606      	mov	r6, r0
 8002680:	460c      	mov	r4, r1
 8002682:	b125      	cbz	r5, 800268e <__swsetup_r+0x16>
 8002684:	69ab      	ldr	r3, [r5, #24]
 8002686:	b913      	cbnz	r3, 800268e <__swsetup_r+0x16>
 8002688:	4628      	mov	r0, r5
 800268a:	f7ff fa1b 	bl	8001ac4 <__sinit>
 800268e:	4b2e      	ldr	r3, [pc, #184]	; (8002748 <__swsetup_r+0xd0>)
 8002690:	429c      	cmp	r4, r3
 8002692:	d10f      	bne.n	80026b4 <__swsetup_r+0x3c>
 8002694:	686c      	ldr	r4, [r5, #4]
 8002696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800269a:	b29a      	uxth	r2, r3
 800269c:	0715      	lsls	r5, r2, #28
 800269e:	d42c      	bmi.n	80026fa <__swsetup_r+0x82>
 80026a0:	06d0      	lsls	r0, r2, #27
 80026a2:	d411      	bmi.n	80026c8 <__swsetup_r+0x50>
 80026a4:	2209      	movs	r2, #9
 80026a6:	6032      	str	r2, [r6, #0]
 80026a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ac:	81a3      	strh	r3, [r4, #12]
 80026ae:	f04f 30ff 	mov.w	r0, #4294967295
 80026b2:	e03e      	b.n	8002732 <__swsetup_r+0xba>
 80026b4:	4b25      	ldr	r3, [pc, #148]	; (800274c <__swsetup_r+0xd4>)
 80026b6:	429c      	cmp	r4, r3
 80026b8:	d101      	bne.n	80026be <__swsetup_r+0x46>
 80026ba:	68ac      	ldr	r4, [r5, #8]
 80026bc:	e7eb      	b.n	8002696 <__swsetup_r+0x1e>
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <__swsetup_r+0xd8>)
 80026c0:	429c      	cmp	r4, r3
 80026c2:	bf08      	it	eq
 80026c4:	68ec      	ldreq	r4, [r5, #12]
 80026c6:	e7e6      	b.n	8002696 <__swsetup_r+0x1e>
 80026c8:	0751      	lsls	r1, r2, #29
 80026ca:	d512      	bpl.n	80026f2 <__swsetup_r+0x7a>
 80026cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026ce:	b141      	cbz	r1, 80026e2 <__swsetup_r+0x6a>
 80026d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026d4:	4299      	cmp	r1, r3
 80026d6:	d002      	beq.n	80026de <__swsetup_r+0x66>
 80026d8:	4630      	mov	r0, r6
 80026da:	f7ff fc55 	bl	8001f88 <_free_r>
 80026de:	2300      	movs	r3, #0
 80026e0:	6363      	str	r3, [r4, #52]	; 0x34
 80026e2:	89a3      	ldrh	r3, [r4, #12]
 80026e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80026e8:	81a3      	strh	r3, [r4, #12]
 80026ea:	2300      	movs	r3, #0
 80026ec:	6063      	str	r3, [r4, #4]
 80026ee:	6923      	ldr	r3, [r4, #16]
 80026f0:	6023      	str	r3, [r4, #0]
 80026f2:	89a3      	ldrh	r3, [r4, #12]
 80026f4:	f043 0308 	orr.w	r3, r3, #8
 80026f8:	81a3      	strh	r3, [r4, #12]
 80026fa:	6923      	ldr	r3, [r4, #16]
 80026fc:	b94b      	cbnz	r3, 8002712 <__swsetup_r+0x9a>
 80026fe:	89a3      	ldrh	r3, [r4, #12]
 8002700:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002708:	d003      	beq.n	8002712 <__swsetup_r+0x9a>
 800270a:	4621      	mov	r1, r4
 800270c:	4630      	mov	r0, r6
 800270e:	f000 f845 	bl	800279c <__smakebuf_r>
 8002712:	89a2      	ldrh	r2, [r4, #12]
 8002714:	f012 0301 	ands.w	r3, r2, #1
 8002718:	d00c      	beq.n	8002734 <__swsetup_r+0xbc>
 800271a:	2300      	movs	r3, #0
 800271c:	60a3      	str	r3, [r4, #8]
 800271e:	6963      	ldr	r3, [r4, #20]
 8002720:	425b      	negs	r3, r3
 8002722:	61a3      	str	r3, [r4, #24]
 8002724:	6923      	ldr	r3, [r4, #16]
 8002726:	b953      	cbnz	r3, 800273e <__swsetup_r+0xc6>
 8002728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800272c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002730:	d1ba      	bne.n	80026a8 <__swsetup_r+0x30>
 8002732:	bd70      	pop	{r4, r5, r6, pc}
 8002734:	0792      	lsls	r2, r2, #30
 8002736:	bf58      	it	pl
 8002738:	6963      	ldrpl	r3, [r4, #20]
 800273a:	60a3      	str	r3, [r4, #8]
 800273c:	e7f2      	b.n	8002724 <__swsetup_r+0xac>
 800273e:	2000      	movs	r0, #0
 8002740:	e7f7      	b.n	8002732 <__swsetup_r+0xba>
 8002742:	bf00      	nop
 8002744:	2000001c 	.word	0x2000001c
 8002748:	080028f4 	.word	0x080028f4
 800274c:	08002914 	.word	0x08002914
 8002750:	080028d4 	.word	0x080028d4

08002754 <__swhatbuf_r>:
 8002754:	b570      	push	{r4, r5, r6, lr}
 8002756:	460e      	mov	r6, r1
 8002758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800275c:	2900      	cmp	r1, #0
 800275e:	b096      	sub	sp, #88	; 0x58
 8002760:	4614      	mov	r4, r2
 8002762:	461d      	mov	r5, r3
 8002764:	da07      	bge.n	8002776 <__swhatbuf_r+0x22>
 8002766:	2300      	movs	r3, #0
 8002768:	602b      	str	r3, [r5, #0]
 800276a:	89b3      	ldrh	r3, [r6, #12]
 800276c:	061a      	lsls	r2, r3, #24
 800276e:	d410      	bmi.n	8002792 <__swhatbuf_r+0x3e>
 8002770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002774:	e00e      	b.n	8002794 <__swhatbuf_r+0x40>
 8002776:	466a      	mov	r2, sp
 8002778:	f000 f850 	bl	800281c <_fstat_r>
 800277c:	2800      	cmp	r0, #0
 800277e:	dbf2      	blt.n	8002766 <__swhatbuf_r+0x12>
 8002780:	9a01      	ldr	r2, [sp, #4]
 8002782:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002786:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800278a:	425a      	negs	r2, r3
 800278c:	415a      	adcs	r2, r3
 800278e:	602a      	str	r2, [r5, #0]
 8002790:	e7ee      	b.n	8002770 <__swhatbuf_r+0x1c>
 8002792:	2340      	movs	r3, #64	; 0x40
 8002794:	2000      	movs	r0, #0
 8002796:	6023      	str	r3, [r4, #0]
 8002798:	b016      	add	sp, #88	; 0x58
 800279a:	bd70      	pop	{r4, r5, r6, pc}

0800279c <__smakebuf_r>:
 800279c:	898b      	ldrh	r3, [r1, #12]
 800279e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027a0:	079d      	lsls	r5, r3, #30
 80027a2:	4606      	mov	r6, r0
 80027a4:	460c      	mov	r4, r1
 80027a6:	d507      	bpl.n	80027b8 <__smakebuf_r+0x1c>
 80027a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027ac:	6023      	str	r3, [r4, #0]
 80027ae:	6123      	str	r3, [r4, #16]
 80027b0:	2301      	movs	r3, #1
 80027b2:	6163      	str	r3, [r4, #20]
 80027b4:	b002      	add	sp, #8
 80027b6:	bd70      	pop	{r4, r5, r6, pc}
 80027b8:	ab01      	add	r3, sp, #4
 80027ba:	466a      	mov	r2, sp
 80027bc:	f7ff ffca 	bl	8002754 <__swhatbuf_r>
 80027c0:	9900      	ldr	r1, [sp, #0]
 80027c2:	4605      	mov	r5, r0
 80027c4:	4630      	mov	r0, r6
 80027c6:	f7ff fa33 	bl	8001c30 <_malloc_r>
 80027ca:	b948      	cbnz	r0, 80027e0 <__smakebuf_r+0x44>
 80027cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027d0:	059a      	lsls	r2, r3, #22
 80027d2:	d4ef      	bmi.n	80027b4 <__smakebuf_r+0x18>
 80027d4:	f023 0303 	bic.w	r3, r3, #3
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	81a3      	strh	r3, [r4, #12]
 80027de:	e7e3      	b.n	80027a8 <__smakebuf_r+0xc>
 80027e0:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <__smakebuf_r+0x7c>)
 80027e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80027e4:	89a3      	ldrh	r3, [r4, #12]
 80027e6:	6020      	str	r0, [r4, #0]
 80027e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ec:	81a3      	strh	r3, [r4, #12]
 80027ee:	9b00      	ldr	r3, [sp, #0]
 80027f0:	6163      	str	r3, [r4, #20]
 80027f2:	9b01      	ldr	r3, [sp, #4]
 80027f4:	6120      	str	r0, [r4, #16]
 80027f6:	b15b      	cbz	r3, 8002810 <__smakebuf_r+0x74>
 80027f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027fc:	4630      	mov	r0, r6
 80027fe:	f000 f81f 	bl	8002840 <_isatty_r>
 8002802:	b128      	cbz	r0, 8002810 <__smakebuf_r+0x74>
 8002804:	89a3      	ldrh	r3, [r4, #12]
 8002806:	f023 0303 	bic.w	r3, r3, #3
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	81a3      	strh	r3, [r4, #12]
 8002810:	89a3      	ldrh	r3, [r4, #12]
 8002812:	431d      	orrs	r5, r3
 8002814:	81a5      	strh	r5, [r4, #12]
 8002816:	e7cd      	b.n	80027b4 <__smakebuf_r+0x18>
 8002818:	08001a8d 	.word	0x08001a8d

0800281c <_fstat_r>:
 800281c:	b538      	push	{r3, r4, r5, lr}
 800281e:	4c07      	ldr	r4, [pc, #28]	; (800283c <_fstat_r+0x20>)
 8002820:	2300      	movs	r3, #0
 8002822:	4605      	mov	r5, r0
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	6023      	str	r3, [r4, #0]
 800282a:	f7ff f8da 	bl	80019e2 <_fstat>
 800282e:	1c43      	adds	r3, r0, #1
 8002830:	d102      	bne.n	8002838 <_fstat_r+0x1c>
 8002832:	6823      	ldr	r3, [r4, #0]
 8002834:	b103      	cbz	r3, 8002838 <_fstat_r+0x1c>
 8002836:	602b      	str	r3, [r5, #0]
 8002838:	bd38      	pop	{r3, r4, r5, pc}
 800283a:	bf00      	nop
 800283c:	2000017c 	.word	0x2000017c

08002840 <_isatty_r>:
 8002840:	b538      	push	{r3, r4, r5, lr}
 8002842:	4c06      	ldr	r4, [pc, #24]	; (800285c <_isatty_r+0x1c>)
 8002844:	2300      	movs	r3, #0
 8002846:	4605      	mov	r5, r0
 8002848:	4608      	mov	r0, r1
 800284a:	6023      	str	r3, [r4, #0]
 800284c:	f7ff f8d7 	bl	80019fe <_isatty>
 8002850:	1c43      	adds	r3, r0, #1
 8002852:	d102      	bne.n	800285a <_isatty_r+0x1a>
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	b103      	cbz	r3, 800285a <_isatty_r+0x1a>
 8002858:	602b      	str	r3, [r5, #0]
 800285a:	bd38      	pop	{r3, r4, r5, pc}
 800285c:	2000017c 	.word	0x2000017c

08002860 <_init>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	bf00      	nop
 8002864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002866:	bc08      	pop	{r3}
 8002868:	469e      	mov	lr, r3
 800286a:	4770      	bx	lr

0800286c <_fini>:
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286e:	bf00      	nop
 8002870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002872:	bc08      	pop	{r3}
 8002874:	469e      	mov	lr, r3
 8002876:	4770      	bx	lr
